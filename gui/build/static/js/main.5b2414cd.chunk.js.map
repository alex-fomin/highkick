{"version":3,"sources":["components/layout.tsx","models/job.ts","services/api.ts","lib/http.ts","services/tree.ts","services/jobs.ts","models/job_log.ts","services/job_logs.ts","components/jobs/item.tsx","components/jobs/leaf.tsx","components/tree/leaf.tsx","components/tree/leaves.tsx","components/misc/paginator.tsx","components/jobs/roots.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","react_default","a","createElement","Fragment","Navbar","bg","variant","Brand","href","alt","src","width","height","className","Container","children","Job","Object","classCallCheck","this","id","type","path","sid","input","output","status","createdAt","childs","isRoot","ids","split","map","i","parseInt","length","childsDigest","c","digest","join","concat","json","window","location","protocol","hostname","BASE","origin","API_BASE","api","URLS","jobs","job","retry","retryFailedChildren","subtree","jobRoots","index","jobLogs","jobId","DEFAULT_HEADERS","Accept","Content-Type","makeRequest","_callee","method","url","data","headers","dataToSend","_data","_i","_Object$keys","key","response","e","_args","arguments","regenerator_default","wrap","_context","prev","next","undefined","assign","values","some","v","File","FormData","keys","append","Axios","request","responseType","params","sent","t0","Error","__SERVER_SIDE_ERRORS__","errors","abrupt","stop","_callee2","_args2","_context2","_callee3","_args3","_context3","_callee4","_args4","_context4","_callee5","_args5","_context5","http","get","post","put","del","tree","compose","rootId","items","root","find","composeSubTree","leaf","filter","l","parentID","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","value","err","return","rootJsons","roots","HTTP","API","deserialize","jsons","updatedJob","Tree","services_jobs","loadRoots","updateJob","destroy","treeStatus","statuses","push","s","every","JobLog","content","reverse","job_logs","loadLogs","JobComponent","_this","possibleConstructorReturn","getPrototypeOf","call","state","showLogs","updateItem","bind","assertThisInitialized","Jobs","JSON","parse","style","fontSize","maxWidth","overflow","main_default","collapsed","displayDataTypes","enableClipboard","renderStatus","ButtonGroup","size","Button","onClick","renderLogs","title","sign","Badge","_this$state","Card","overflowY","jobLog","_this2","asyncToGenerator","mark","onItemUpdate","_this3","setState","JobLogs","confirm","React","Component","builder","jobs_item","item","TreeLeafComponent","opened","toggle","classnames","d-none","leaves","TreeLeaves","_this$props","tree_leaf","Paginator","onPageLinkClick","maxPage","Array","apply","renderPageLink","pageNumber","current","page","event","preventDefault","onPageChange","RootsList","loading","loadItems","then","Leaf","paginator","newPage","Math","max","layout","Row","Col","md","jobs_roots","Boolean","match","ReactDOM","render","app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5b2414cd.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Container, Navbar } from 'react-bootstrap'\n\nconst App: React.FC = (props: any) => {\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"\">\n          <img\n            alt=\"\"\n            src=\"./logo.png\"\n            width=\"30\"\n            height=\"30\"\n            className=\"d-inline-block align-top mr-4\"\n          />\n          {'High kick'}\n        </Navbar.Brand>\n      </Navbar>\n      <Container>\n        { props.children }\n      </Container>\n    </>);\n}\n\nexport default App;\n","import TreeLeaf from './tree_leaf'\n\nexport type Status = 'initial' | 'processing' | 'failed' | 'completed'\n\ntype Props = {\n  id: number\n  type: string\n  path: string\n  sid: string\n  input: string\n  output: string\n  status: Status\n  createdAt: string\n\n  childs: Job[]\n}\n\nclass Job implements Props, TreeLeaf {\n  id: number = 0\n  type: string = ''\n  path: string = ''\n  sid: string = ''\n  input: string = ''\n  output: string = ''\n  status: Status = 'initial'\n  createdAt: string = ''\n\n  childs: Job[] = []\n\n  constructor(props: Partial<Props>) {\n    if(props.id) { this.id = props.id }\n    if(props.type) { this.type = props.type }\n    if(props.path) { this.path = props.path }\n    if(props.sid) { this.sid = props.sid }\n    if(props.input) { this.input = props.input }\n    if(props.output) { this.output = props.output }\n    if(props.status) { this.status = props.status }\n    if(props.createdAt) { this.createdAt = props.createdAt }\n\n    if(props.childs) { this.childs = props.childs }\n  }\n\n  isRoot() {\n    return this.path === ''\n  }\n\n  parentID() {\n    if (this.isRoot()) {\n      return null\n    }\n    const ids = this.path.split('/').map(i => parseInt(i))\n    return ids[ids.length - 1]\n  }\n\n  // TODO: use hash function\n  digest(): string {\n    const childsDigest = this.childs.map(c => c.digest()).join()\n    return `${this.id}${this.status}${childsDigest}`\n  }\n\n  static deserialize(json: any): Job {\n    const job = new Job(json as Partial<Props>)\n    return job\n  }\n}\n\nexport default Job","const {protocol, hostname} = window.location\n\nconst BASE = {\n  'development': `${protocol}//${hostname}:8000`,\n  'production': window.location.origin,\n  'test': window.location.origin\n}[process.env.NODE_ENV]\n\nconst API_BASE = `${BASE}/highkick`\n\nconst URLS = {\n  jobs: {\n    job: (id: number) => `${API_BASE}/jobs/${id}`,\n    retry: (id: number) => `${API_BASE}/jobs/${id}/retry`,\n    retryFailedChildren: (id: number) => `${API_BASE}/jobs/${id}/retry_failed_children`,\n    subtree: (id: number) => `${API_BASE}/jobs/${id}/subtree`\n  },\n  jobRoots: {\n    index: `${API_BASE}/job_roots`\n  },\n  jobLogs: {\n    index: (jobId: number) => `${API_BASE}/jobs/${jobId}/logs`,\n  }\n}\n\nexport default { URLS }","import Axios from 'axios'\n\ntype HTTP_METHOD = 'get' | 'post' | 'put' | 'delete'\n\nconst DEFAULT_HEADERS = {\n  'Accept': 'application/json',\n  'Content-Type': 'application/json',\n}\n\nasync function makeRequest(method: HTTP_METHOD, url: string, data: any = null) {\n  const headers = Object.assign({}, DEFAULT_HEADERS)\n  let dataToSend = Object.assign({}, data)\n\n  // File uploading\n  //\n  const hasFiles = ((<any>Object).values(dataToSend).some((v: any) => v instanceof File))\n  if (hasFiles) {\n    headers['Content-Type'] = 'multipart/form-data'\n    const _data = new FormData()\n    for (const key of Object.keys(dataToSend)) {\n      _data.append(key, dataToSend[key])\n    }\n    dataToSend = _data\n  }\n\n  let response \n  try {\n    response = await Axios.request({\n      method, url, \n      data: dataToSend,\n      headers: headers,\n      // withCredentials: true,\n      responseType: 'json',\n      params: (method === 'get') ? dataToSend : undefined\n    })\n  } catch (error) {\n    if (!error.response) {\n      throw error\n    }\n    \n    if (error.response.status === 422) {\n      const e: any = new Error('422 response')\n       // NOTE: Client-server integration convention\n      e.__SERVER_SIDE_ERRORS__ = error.response.data.errors\n      throw e\n    }\n\n    throw error\n  }\n  \n  return response.data\n}\n\nasync function get(url: string, data: any = {}) {\n  return makeRequest('get', url, data)\n}\n\nasync function post(url: string, data: any = null) {\n  return makeRequest('post', url, data)\n}\n\nasync function put(url: string, data: any = null) {\n  return makeRequest('put', url, data)\n}\n\nasync function del(url: string, data: any = null) {\n  return makeRequest('delete', url, data)\n}\n\nexport default { get, post, put, del }\n","import TreeLeaf from '../models/tree_leaf'\n\nfunction compose<Item extends TreeLeaf>(params: {\n  rootId: number,\n  items: Item[]\n}) {\n  const { rootId, items } = params\n\n  const root = items.find(i => i.id === rootId)\n  if (!root) {\n    throw new Error('No root found')\n  }\n\n  const composeSubTree = (leaf: TreeLeaf) => {\n    leaf.childs = items.filter(l => l.parentID() === leaf.id)\n    for(const child of leaf.childs) {\n      composeSubTree(child)\n    }\n  }\n\n  composeSubTree(root)\n  return root\n}\n\nexport default { compose }","import Job, { Status } from '../models/job'\n\nimport API from './api'\nimport HTTP from '../lib/http'\n\nimport Tree from './tree'\n\nasync function loadRoots(params: { page: number }) {\n  const rootJsons = await HTTP.get(API.URLS.jobRoots.index, params)\n  const roots = rootJsons.map(Job.deserialize)\n  return roots\n}\n\nasync function updateJob(job: Job) {\n  const jsons = await HTTP.get(API.URLS.jobs.subtree(job.id))\n  const jobs = jsons.map(Job.deserialize)\n  const updatedJob = Tree.compose<Job>({\n    items: jobs,\n    rootId: job.id\n  })\n  return updatedJob\n}\n\nasync function retry(job: Job) {\n  await HTTP.post(API.URLS.jobs.retry(job.id))\n}\n\nasync function retryFailedChildren(job: Job) {\n  await HTTP.post(API.URLS.jobs.retryFailedChildren(job.id))\n}\n\nasync function destroy(job: Job) {\n  await HTTP.del(API.URLS.jobs.job(job.id))\n}\n\nfunction treeStatus(job: Job): Status {\n  const statuses = job.childs.map(treeStatus)\n  statuses.push(job.status)\n\n  if (statuses.some(s => s === 'processing')) {\n    return 'processing'\n  }\n\n  if (statuses.some(s => s === 'failed')) {\n    return 'failed'\n  }\n\n  if (statuses.every(s => s === 'completed')) {\n    return 'completed'\n  }\n\n  if (statuses.every(s => s === 'initial')) {\n    return 'initial'\n  }\n\n  return 'processing'\n}\n\nexport default { loadRoots, updateJob, retry, retryFailedChildren, destroy, treeStatus }\n","type Props = {\n  id: number\n  content: string\n  createdAt: string\n}\n\nclass JobLog implements Props {\n  id: number = 0\n  content: string = ''\n  createdAt: string = ''\n\n  constructor(props: Partial<Props>) {\n    if(props.id) { this.id = props.id }\n    if(props.content) { this.content = props.content }\n    if(props.createdAt) { this.createdAt = props.createdAt }\n  }\n\n  static deserialize(json: any): JobLog {\n    const model = new JobLog(json as Partial<Props>)\n    return model\n  }\n}\n\nexport default JobLog","import Job from '../models/job'\nimport JobLog from '../models/job_log'\n\nimport API from './api'\nimport HTTP from '../lib/http'\n\nasync function loadLogs(job: Job) {\n  const data = await HTTP.get(API.URLS.jobLogs.index(job.id))\n  const roots = data.map(JobLog.deserialize).reverse()\n  return roots\n}\n\nexport default { loadLogs }\n","import React from 'react'\nimport ReactJsonView from 'react-json-view'\nimport { ButtonGroup, Button, Badge, Card } from 'react-bootstrap'\n\nimport Job, { Status } from '../../models/job'\nimport JobLog from '../../models/job_log'\nimport Jobs from '../../services/jobs'\nimport JobLogs from '../../services/job_logs'\n\ntype Props = {\n  job: Job\n  onItemUpdate: (job: Job) => any\n}\n\ntype State = {\n  showLogs: boolean\n  jobLogs: JobLog[]\n}\n\nclass JobComponent extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n\n    this.state = {\n      showLogs: false,\n      jobLogs: []\n    }\n\n    this.updateItem = this.updateItem.bind(this)\n    this.showLogs = this.showLogs.bind(this)\n    this.retry = this.retry.bind(this)\n    this.retryFailedChildren = this.retryFailedChildren.bind(this)\n    this.destroy = this.destroy.bind(this)\n  }\n\n  render() {\n    const { job } = this.props\n    const treeStatus = Jobs.treeStatus(job)\n    const input = job.input !== \"\" ? JSON.parse(job.input) : {}\n    const output = job.output !== \"\" ? JSON.parse(job.output) : {}\n\n    return (\n      <>\n        <div className=\"d-flex\">\n          <div className=\"mr-1 text-muted\" style={{ fontSize: 12 }}>{job.id}</div>\n          <div\n            className=\"mr-1 font-italic\"\n            style={{fontSize: '12px', maxWidth: '150px', overflow: 'scroll'}}\n          >{job.type}</div>\n          <div className=\"flex-fill d-flex flex-column\">\n            <ReactJsonView\n              src={input}\n              collapsed={true}\n              displayDataTypes={false}\n              enableClipboard={false}\n              style={{fontSize: 10}}\n            />\n            <ReactJsonView\n              src={output}\n              collapsed={true}\n              displayDataTypes={false}\n              enableClipboard={false}\n              style={{fontSize: 10}}\n            />\n          </div>\n          <div className=\"mr-1\">{this.renderStatus(job.status)}</div>\n          <div className=\"mr-1\">\n            {job.childs.length > 0 && this.renderStatus(treeStatus, '🌳')}\n          </div>\n          <div>\n            <ButtonGroup size=\"sm\">\n              <Button variant=\"light\" onClick={this.updateItem}>👁</Button>\n              <Button variant=\"light\" className=\"text-muted\" onClick={this.showLogs}>Logs</Button>\n              { (job.status !== 'completed') && <Button variant=\"light\" className=\"text-success\" onClick={this.retry}>↻</Button> }\n              { (treeStatus !== 'completed' && job.childs.length > 0) && <Button variant=\"light\" className=\"text-success\" onClick={this.retryFailedChildren}>↻ 🍂</Button> }\n              <Button variant=\"light\" onClick={this.destroy}>🗑</Button>\n            </ButtonGroup>\n          </div>\n        </div>\n        { this.renderLogs() }\n      </>)\n  }\n\n  renderStatus(status: Status, title?: string) {\n    const variant = (status === 'completed') ? 'success' : ((status === 'failed') ? 'danger' : 'info' )\n    const sign = (status === 'completed') ? '✌' : ((status === 'failed') ? '✘' : '༗' )\n    return (\n      <h5 className=\"m-0 p-0\">\n        <Badge variant={variant}>{title}{sign}</Badge>\n      </h5>)\n  }\n\n  renderLogs() {\n    const { showLogs, jobLogs } = this.state\n\n    if (!showLogs) { return null }\n    return (\n      <Card className=\"mt-2 mb-2 bg-light\" style={{ fontSize: '12px', overflowY: 'scroll' }}>\n        { jobLogs.map(jobLog => {\n          return (\n            <div className=\"d-flex\" key={jobLog.id}>\n              <div style={{width: 150}}>{jobLog.createdAt}</div>\n              <div className=\"flex-fill\">{jobLog.content}</div>\n            </div>)\n        }) }\n      </Card>\n    )\n  }\n\n  private updateItem() {\n    const { job } = this.props;\n\n    (async () => {\n      let updatedJob = await Jobs.updateJob(job)\n      this.props.onItemUpdate(updatedJob)\n    })()\n  }\n\n  private showLogs() {\n    const { job } = this.props\n    const { showLogs } = this.state\n\n    if (showLogs) {\n      this.setState({ showLogs: false })\n      return\n    }\n\n    (async () => {\n      let jobLogs = await JobLogs.loadLogs(job)\n      this.setState({ showLogs: true, jobLogs })\n    })()\n  }\n\n  private retry() {\n    const { job } = this.props;\n    if (window.confirm('Do you wanna to retry this job?') === false) {\n      return\n    }\n\n    (async () => {\n      await Jobs.retry(job)\n    })()\n  }\n\n  private retryFailedChildren() {\n    const { job } = this.props;\n    if (window.confirm('Do you wanna to retry failed children of this job?') === false) {\n      return\n    }\n\n    (async () => {\n      await Jobs.retryFailedChildren(job)\n    })()\n  }\n\n  private destroy() {\n    const { job } = this.props;\n    if (window.confirm('Do you wanna to destroy this job?') === false) {\n      return\n    }\n\n    (async () => {\n      await Jobs.destroy(job)\n    })()\n  }\n}\n\nexport default JobComponent","import React from 'react'\n\nimport LeafBuilder from './../tree/builder'\n\nimport Job from '../../models/job'\nimport ItemComponent from './item'\n\nconst builder: LeafBuilder<Job> = props => {\n  return (\n    <ItemComponent\n      job={props.item}\n      onItemUpdate={props.onItemUpdate}\n    />)\n}\n\nexport default { builder }","import React from 'react'\nimport classnames from 'classnames'\n\nimport { Button } from 'react-bootstrap'\n\nimport TreeLeaf from '../../models/tree_leaf'\nimport Builder from './builder'\nimport Leaves from './leaves'\n\ntype Props<Item> = {\n  item: Item\n  builder: Builder<Item>\n}\n\ntype State<Item> = {\n  item: Item\n  opened: boolean\n}\n\nclass TreeLeafComponent<Item extends TreeLeaf> extends React.Component<Props<Item>, State<Item>> {\n  constructor(props: Props<Item>) {\n    super(props)\n\n    this.state = {\n      item: props.item,\n      opened: props.item.isRoot() ? false : true\n    }\n\n    this.toggle = this.toggle.bind(this)\n    this.onItemUpdate = this.onItemUpdate.bind(this)\n  }\n\n  render() {\n    const { builder } = this.props\n    const { item, opened } = this.state\n\n    return (\n      <li className=\"list-group-item p-0\">\n        <div className=\"d-flex\">\n          <div style={{width: 40}}>\n            <Button variant=\"light\" size=\"sm\" onClick={this.toggle}>\n              { opened ? '↘' : '↗'}\n            </Button>\n          </div>\n          <div className=\"flex-fill\">\n            {builder({ item, onItemUpdate: this.onItemUpdate })}\n            <div className={classnames({'d-none': !opened})}>\n              <Leaves\n                items={item.childs as Item[]}\n                builder={builder}\n              />\n            </div>\n          </div> \n        </div>\n      </li>)\n  }\n\n  private toggle() {\n    this.setState({\n      opened: !this.state.opened\n    })\n  }\n\n  private onItemUpdate(item: Item) {\n    this.setState({\n      item,\n      opened: true\n    })\n  }\n}\n\nexport default TreeLeafComponent","import React from 'react'\nimport classnames from 'classnames'\n\nimport TreeLeafInterface from '../../models/tree_leaf'\nimport Builder from './builder'\nimport Leaf from './leaf'\n\ntype Props<Item> = {\n  items: Item[]\n  builder: Builder<Item>\n}\n\nclass TreeLeaves<Item extends TreeLeafInterface> extends React.Component<Props<Item>> {\n  render() {\n    const { items, builder } = this.props\n\n    return (\n      <ul className={classnames('list-group', 'p-0')}>\n        { items.map(item => {\n          return (\n            <Leaf\n              key={item.digest()}\n              item={item}\n              builder={builder}\n            />)\n        }) }\n      </ul>)\n  }\n}\n\nexport default TreeLeaves","import React from 'react'\n\ntype Props = {\n  page: number\n  maxPage: number\n  onPageChange: (page: number) => any\n}\n\nclass Paginator extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props)\n    this.onPageLinkClick = this.onPageLinkClick.bind(this)\n  }\n\n  render() {\n    const { maxPage } = this.props\n\n    return (\n      <nav>\n        <ul className=\"pagination\">\n          { Array.apply(null, Array(maxPage)).map((v, i) => {\n            return this.renderPageLink(i + 1)\n          }) }\n        </ul>\n      </nav>)\n  }\n\n  private renderPageLink(pageNumber: number) {\n    const { page } = this.props\n    const current = page === pageNumber\n\n    return (\n      <li className=\"page-item\" key={pageNumber}>\n        { current && (\n            <span className=\"page-link\">\n              {pageNumber}\n            </span>) }\n      \n        { !current && (\n            <a className=\"page-link\" href=\"#\" onClick={(event) => this.onPageLinkClick(event, pageNumber)}>\n              {pageNumber}\n            </a>) }\n      </li>)\n  }\n\n  private onPageLinkClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>, page: number) {\n    event.preventDefault()\n    this.props.onPageChange(page)\n  }\n}\n\nexport default Paginator","import React from 'react'\n\nimport Jobs from '../../services/jobs'\n\nimport Job from '../../models/job'\nimport Leaf from './leaf'\nimport TreeLeaves from '../tree/leaves'\nimport Paginator from '../misc/paginator'\n\ntype Props = {}\ntype State = {\n  loading: boolean\n  page: number\n  maxPage: number\n  roots: Job[]\n}\n\nclass RootsList extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n\n    this.state = {\n      loading: true,\n      page: 1,\n      maxPage: 1,\n      roots: []\n    }\n    \n    this.onPageChange = this.onPageChange.bind(this)\n  }\n\n  componentDidMount() {\n    this.loadItems(1).then(() => {})\n  }\n\n  render() {\n    const { loading, roots, page, maxPage } = this.state\n\n    if (loading) {\n      return (\n        <div className=\"d-flex w-100 h-100\">\n          <div className=\"m-auto\">Loading</div>\n        </div>\n      )\n    }\n\n    return (\n      <>\n        <TreeLeaves\n          items={roots}\n          builder={Leaf.builder}\n        />\n        <Paginator page={page} maxPage={maxPage} onPageChange={this.onPageChange}/>\n      </>)\n  }\n\n  private onPageChange(newPage: number) {\n    this.loadItems(newPage).then(() => {})\n  }\n\n  private async loadItems(page: number) {\n    const { maxPage } = this.state\n    const roots = await Jobs.loadRoots({ page })\n    this.setState({\n      loading: false,\n      page,\n      roots,\n      maxPage: Math.max(maxPage, page + 1),\n    })\n  }\n}\n\nexport default RootsList","import React from 'react';\n\nimport { Row, Col } from 'react-bootstrap'\n\nimport Layout from './components/layout'\nimport JobRootsList from './components/jobs/roots'\n\nconst App: React.FC = () => {\n  return (\n    <Layout>\n      <Row>\n        <Col md={12} className=\"pt-4\">\n          <JobRootsList/>\n        </Col>\n      </Row>\n    </Layout>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}