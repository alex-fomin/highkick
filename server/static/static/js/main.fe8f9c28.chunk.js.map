{"version":3,"sources":["components/layout.tsx","models/job.ts","services/api.ts","lib/http.ts","services/tree.ts","services/jobs.ts","models/job_log.ts","services/job_logs.ts","components/jobs/item.tsx","components/jobs/leaf.tsx","components/tree/leaf.tsx","components/tree/leaves.tsx","components/jobs/roots.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","react_default","a","createElement","Fragment","Navbar","bg","variant","Brand","href","alt","src","width","height","className","Container","children","Job","Object","classCallCheck","this","id","type","path","sid","input","output","status","createdAt","childs","isRoot","ids","split","map","parseInt","length","json","window","location","protocol","hostname","API_BASE","concat","api","URLS","jobs","retry","subtree","jobRoots","index","jobLogs","jobId","DEFAULT_HEADERS","Accept","Content-Type","makeRequest","_callee","method","url","data","headers","dataToSend","_data","_i","_Object$keys","key","response","e","_args","arguments","regenerator_default","wrap","_context","prev","next","undefined","assign","values","some","v","File","FormData","keys","append","Axios","request","responseType","params","sent","t0","Error","__SERVER_SIDE_ERRORS__","errors","abrupt","stop","_callee2","_args2","_context2","_callee3","_args3","_context3","_callee4","_args4","_context4","_callee5","_args5","_context5","http","get","post","put","del","tree","compose","rootId","items","root","find","i","composeSubTree","leaf","filter","l","parentID","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","value","err","return","rootJsons","roots","HTTP","API","deserialize","job","jsons","updatedJob","Tree","services_jobs","loadRoots","updateJob","JobLog","content","reverse","job_logs","loadLogs","JobComponent","_this","possibleConstructorReturn","getPrototypeOf","call","state","showLogs","updateItem","bind","assertThisInitialized","Row","Col","md","Badge","ButtonGroup","size","Button","onClick","renderLogs","_this$state","style","fontSize","overflowY","Table","jobLog","_this2","asyncToGenerator","mark","Jobs","onItemUpdate","_this3","setState","JobLogs","confirm","React","Component","builder","jobs_item","item","TreeLeafComponent","opened","toggle","classnames","d-none","leaves","TreeLeaves","_this$props","tree_leaf","RootsList","loading","Leaf","layout","jobs_roots","Boolean","match","ReactDOM","render","app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe8f9c28.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Container, Navbar } from 'react-bootstrap'\n\nconst App: React.FC = (props: any) => {\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"\">\n          <img\n            alt=\"\"\n            src=\"/logo.png\"\n            width=\"30\"\n            height=\"30\"\n            className=\"d-inline-block align-top mr-4\"\n          />\n          {'High kick'}\n        </Navbar.Brand>\n      </Navbar>\n      <Container>\n        { props.children }\n      </Container>\n    </>);\n}\n\nexport default App;\n","import TreeLeaf from './tree_leaf'\n\ntype Props = {\n  id: number\n  type: string\n  path: string\n  sid: string\n  input: string\n  output: string\n  status: string\n  createdAt: string\n\n  childs: Job[]\n}\n\nclass Job implements Props, TreeLeaf {\n  id: number = 0\n  type: string = ''\n  path: string = ''\n  sid: string = ''\n  input: string = ''\n  output: string = ''\n  status: string = 'initial'\n  createdAt: string = ''\n\n  childs: Job[] = []\n\n  constructor(props: Partial<Props>) {\n    if(props.id) { this.id = props.id }\n    if(props.type) { this.type = props.type }\n    if(props.path) { this.path = props.path }\n    if(props.sid) { this.sid = props.sid }\n    if(props.input) { this.input = props.input }\n    if(props.output) { this.output = props.output }\n    if(props.status) { this.status = props.status }\n    if(props.createdAt) { this.createdAt = props.createdAt }\n\n    if(props.childs) { this.childs = props.childs }\n  }\n\n  isRoot() {\n    return this.path === ''\n  }\n\n  parentID() {\n    if (this.isRoot()) {\n      return null\n    }\n    const ids = this.path.split('/').map(parseInt)\n    return ids[ids.length - 1]\n  }\n\n  static deserialize(json: any): Job {\n    const job = new Job(json as Partial<Props>)\n    return job\n  }\n}\n\nexport default Job","const {protocol, hostname} = window.location\n\nconst API_BASE = `${protocol}//${hostname}:8000/highkick`\n\nconst URLS = {\n  jobs: {\n    retry: (id: number) => `${API_BASE}/jobs/${id}/retry`,\n    subtree: (id: number) => `${API_BASE}/jobs/${id}/subtree`\n  },\n  jobRoots: {\n    index: `${API_BASE}/job_roots`\n  },\n  jobLogs: {\n    index: (jobId: number) => `${API_BASE}/jobs/${jobId}/logs`,\n  }\n}\n\nexport default { URLS }","import Axios from 'axios'\n\ntype HTTP_METHOD = 'get' | 'post' | 'put' | 'delete'\n\nconst DEFAULT_HEADERS = {\n  'Accept': 'application/json',\n  'Content-Type': 'application/json',\n}\n\nasync function makeRequest(method: HTTP_METHOD, url: string, data: any = null) {\n  const headers = Object.assign({}, DEFAULT_HEADERS)\n  let dataToSend = Object.assign({}, data)\n\n  // File uploading\n  //\n  const hasFiles = ((<any>Object).values(dataToSend).some((v: any) => v instanceof File))\n  if (hasFiles) {\n    headers['Content-Type'] = 'multipart/form-data'\n    const _data = new FormData()\n    for (const key of Object.keys(dataToSend)) {\n      _data.append(key, dataToSend[key])\n    }\n    dataToSend = _data\n  }\n\n  let response \n  try {\n    response = await Axios.request({\n      method, url, \n      data: dataToSend,\n      headers: headers,\n      // withCredentials: true,\n      responseType: 'json',\n      params: (method === 'get') ? dataToSend : undefined\n    })\n  } catch (error) {\n    if (!error.response) {\n      throw error\n    }\n    \n    if (error.response.status === 422) {\n      const e: any = new Error('422 response')\n       // NOTE: Client-server integration convention\n      e.__SERVER_SIDE_ERRORS__ = error.response.data.errors\n      throw e\n    }\n\n    throw error\n  }\n  \n  return response.data\n}\n\nasync function get(url: string, data: any = {}) {\n  return makeRequest('get', url, data)\n}\n\nasync function post(url: string, data: any = null) {\n  return makeRequest('post', url, data)\n}\n\nasync function put(url: string, data: any = null) {\n  return makeRequest('put', url, data)\n}\n\nasync function del(url: string, data: any = null) {\n  return makeRequest('delete', url, data)\n}\n\nexport default { get, post, put, del }\n","import TreeLeaf from '../models/tree_leaf'\n\nfunction compose<Item extends TreeLeaf>(params: {\n  rootId: number,\n  items: Item[]\n}) {\n  const { rootId, items } = params\n\n  const root = items.find(i => i.id === rootId)\n  if (!root) {\n    throw new Error('No root found')\n  }\n\n  const composeSubTree = (leaf: TreeLeaf) => {\n    leaf.childs = items.filter(l => l.parentID() === leaf.id)\n    for(const child of leaf.childs) {\n      composeSubTree(child)\n    }\n  }\n\n  composeSubTree(root)\n  return root\n}\n\nexport default { compose }","import Job from '../models/job'\n\nimport API from './api'\nimport HTTP from '../lib/http'\n\nimport Tree from './tree'\n\nasync function loadRoots() {\n  const rootJsons = await HTTP.get(API.URLS.jobRoots.index)\n  const roots = rootJsons.map(Job.deserialize)\n  return roots\n}\n\nasync function updateJob(job: Job) {\n  const jsons = await HTTP.get(API.URLS.jobs.subtree(job.id))\n  const jobs = jsons.map(Job.deserialize)\n  const updatedJob = Tree.compose<Job>({\n    items: jobs,\n    rootId: job.id\n  })\n  return updatedJob\n}\n\nasync function retry(job: Job) {\n  await HTTP.post(API.URLS.jobs.retry(job.id))\n}\n\nexport default { loadRoots, updateJob, retry }\n","type Props = {\n  id: number\n  content: string\n  createdAt: string\n}\n\nclass JobLog implements Props {\n  id: number = 0\n  content: string = ''\n  createdAt: string = ''\n\n  constructor(props: Partial<Props>) {\n    if(props.id) { this.id = props.id }\n    if(props.content) { this.content = props.content }\n    if(props.createdAt) { this.createdAt = props.createdAt }\n  }\n\n  static deserialize(json: any): JobLog {\n    const model = new JobLog(json as Partial<Props>)\n    return model\n  }\n}\n\nexport default JobLog","import Job from '../models/job'\nimport JobLog from '../models/job_log'\n\nimport API from './api'\nimport HTTP from '../lib/http'\n\nasync function loadLogs(job: Job) {\n  const data = await HTTP.get(API.URLS.jobLogs.index(job.id))\n  const roots = data.map(JobLog.deserialize).reverse()\n  return roots\n}\n\nexport default { loadLogs }\n","import React from 'react'\nimport { Row, Col, ButtonGroup, Button, Badge, Table } from 'react-bootstrap'\n\nimport Job from '../../models/job'\nimport JobLog from '../../models/job_log'\nimport Jobs from '../../services/jobs'\nimport JobLogs from '../../services/job_logs'\n\ntype Props = {\n  job: Job\n  onItemUpdate: (job: Job) => any\n}\n\ntype State = {\n  showLogs: boolean\n  jobLogs: JobLog[]\n}\n\nclass JobComponent extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n\n    this.state = {\n      showLogs: false,\n      jobLogs: []\n    }\n\n    this.updateItem = this.updateItem.bind(this)\n    this.showLogs = this.showLogs.bind(this)\n    this.retry = this.retry.bind(this)\n  }\n\n  render() {\n    const { job } = this.props\n\n    return (\n      <>\n        <Row>\n          <Col md={1}>{job.id}</Col>\n          <Col md={3}>{job.type}</Col>\n          <Col md={2}>\n            <code>{job.input}</code>\n          </Col>\n          <Col md={2}>\n            <code>{job.output}</code>\n          </Col>\n          <Col md={2}>\n            <Badge variant=\"primary\">{job.status}</Badge>\n          </Col>\n          <Col md={2}>\n            <ButtonGroup size=\"sm\">\n              <Button key=\"update\" onClick={this.updateItem}>Up</Button>\n              <Button key=\"logs\" onClick={this.showLogs}>Logs</Button>\n              <Button key=\"retry\" onClick={this.retry}>Retry</Button>\n            </ButtonGroup>\n          </Col>\n        </Row>\n        { this.renderLogs() }\n      </>)\n  }\n\n  renderLogs() {\n    const { showLogs, jobLogs } = this.state\n\n    if (!showLogs) { return null }\n    return (\n      <div style={{ fontSize: '12px', overflowY: 'scroll' }}>\n        <Table size=\"sm\">\n          { jobLogs.map(jobLog => {\n            return (\n              <tr key={jobLog.id}>\n                <td>{jobLog.createdAt}</td>\n                <td>{jobLog.content}</td>\n              </tr>)\n          }) }\n        </Table>\n      </div>\n    )\n  }\n\n  private updateItem() {\n    const { job } = this.props;\n\n    (async () => {\n      let updatedJob = await Jobs.updateJob(job)\n      this.props.onItemUpdate(updatedJob)\n    })()\n  }\n\n  private showLogs() {\n    const { job } = this.props\n    const { showLogs } = this.state\n\n    if (showLogs) {\n      this.setState({ showLogs: false })\n      return\n    }\n\n    (async () => {\n      let jobLogs = await JobLogs.loadLogs(job)\n      this.setState({ showLogs: true, jobLogs })\n    })()\n  }\n\n  private retry() {\n    const { job } = this.props;\n    if (window.confirm('Do you wanna to retry this job?') === false) {\n      return\n    }\n\n    (async () => {\n      await Jobs.retry(job)\n    })()\n  }\n}\n\nexport default JobComponent","import React from 'react'\n\nimport LeafBuilder from './../tree/builder'\n\nimport Job from '../../models/job'\nimport ItemComponent from './item'\n\nconst builder: LeafBuilder<Job> = props => {\n  return (\n    <ItemComponent\n      job={props.item}\n      onItemUpdate={props.onItemUpdate}\n    />)\n}\n\nexport default { builder }","import React from 'react'\nimport classnames from 'classnames'\n\nimport { Row, Col, Button } from 'react-bootstrap'\n\nimport TreeLeaf from '../../models/tree_leaf'\nimport Builder from './builder'\nimport Leaves from './leaves'\n\ntype Props<Item> = {\n  item: Item\n  builder: Builder<Item>\n}\n\ntype State<Item> = {\n  item: Item\n  opened: boolean\n}\n\nclass TreeLeafComponent<Item extends TreeLeaf> extends React.Component<Props<Item>, State<Item>> {\n  constructor(props: Props<Item>) {\n    super(props)\n\n    this.state = {\n      item: props.item,\n      opened: props.item.isRoot() ? false : true\n    }\n\n    this.toggle = this.toggle.bind(this)\n    this.onItemUpdate = this.onItemUpdate.bind(this)\n  }\n\n  render() {\n    const { builder } = this.props\n    const { item, opened } = this.state\n\n    return (\n      <Row>\n        <Col md={1} className=\"p-0\">\n          <Button size=\"sm\" onClick={this.toggle}>\n            { opened ? '↘' : '↗'}\n          </Button>\n        </Col>\n        <Col md={11} className=\"p-0\">\n          {builder({ item, onItemUpdate: this.onItemUpdate })}\n          <div className={classnames({'d-none': !opened})}>\n            <Leaves\n              items={item.childs as Item[]}\n              builder={builder}\n            />\n          </div>\n        </Col> \n      </Row>)\n  }\n\n  private toggle() {\n    this.setState({\n      opened: !this.state.opened\n    })\n  }\n\n  private onItemUpdate(item: Item) {\n    this.setState({ item })\n  }\n}\n\nexport default TreeLeafComponent","import React from 'react'\nimport classnames from 'classnames'\n\nimport TreeLeafInterface from '../../models/tree_leaf'\nimport Builder from './builder'\nimport Leaf from './leaf'\n\ntype Props<Item> = {\n  items: Item[]\n  builder: Builder<Item>\n}\n\nclass TreeLeaves<Item extends TreeLeafInterface> extends React.Component<Props<Item>> {\n  render() {\n    const { items, builder } = this.props\n\n    return (\n      <ul className={classnames('list-group')}>\n        { items.map(item => {\n          return (\n            <li className=\"list-group-item\" key={item.id}>\n              <Leaf \n                item={item}\n                builder={builder}\n              />\n            </li>)\n        }) }\n      </ul>)\n  }\n}\n\nexport default TreeLeaves","import React from 'react'\n\nimport Jobs from '../../services/jobs'\n\nimport Job from '../../models/job'\nimport Leaf from './leaf'\nimport TreeLeaves from '../tree/leaves'\n\ntype Props = {}\ntype State = {\n  loading: boolean\n  roots: Job[]\n}\n\nclass RootsList extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n\n    this.state = {\n      loading: true,\n      roots: []\n    }\n  }\n\n  componentDidMount() {\n    (async () => {\n      const roots = await Jobs.loadRoots()\n      this.setState({ loading: false, roots })\n    })()\n  }\n\n  render() {\n    const { loading, roots } = this.state\n\n    if (loading) {\n      return (\n        <div className=\"d-flex w-100 h-100\">\n          <div className=\"m-auto\">Loading</div>\n        </div>\n      )\n    }\n\n    return (\n      <TreeLeaves\n        items={roots}\n        builder={Leaf.builder}\n      />)\n  }\n}\n\nexport default RootsList","import React from 'react';\n\nimport { Row, Col } from 'react-bootstrap'\n\nimport Layout from './components/layout'\nimport JobRootsList from './components/jobs/roots'\n\nconst App: React.FC = () => {\n  return (\n    <Layout>\n      <Row>\n        <Col md={12} className=\"pt-4\">\n          <JobRootsList/>\n        </Col>\n      </Row>\n    </Layout>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}