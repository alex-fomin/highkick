{"version":3,"sources":["components/layout.tsx","models/job.ts","services/api.ts","lib/http.ts","services/tree.ts","services/jobs.ts","redux/actions/jobs.ts","components/jobs/status.tsx","models/job_log.ts","services/job_logs.ts","components/jobs/item.tsx","components/jobs/leaf.tsx","components/tree/leaf.tsx","components/tree/leaves.tsx","components/misc/paginator.tsx","components/jobs/filters.tsx","components/jobs/roots.tsx","app.tsx","serviceWorker.ts","redux/reducers/jobs.ts","redux/reducers/index.ts","redux/plain_object_middleware.ts","redux/store.ts","services/ws.ts","index.tsx"],"names":["Layout","props","isWidget","widget","Navbar","bg","variant","Brand","href","Container","className","undefined","children","Job","prop","id","type","path","sid","input","output","status","treeStatus","createdAt","cron","logsCount","childs","this","isRoot","ids","split","map","i","parseInt","length","childsDigest","c","digest","join","json","window","location","protocol","hostname","BASE","origin","API_BASE","URLS","ws","jobs","job","retry","retryFailedLeaves","subtree","jobRoots","index","jobLogs","jobId","DEFAULT_HEADERS","makeRequest","method","url","a","data","headers","Object","assign","dataToSend","values","some","v","File","_data","FormData","keys","key","append","Axios","request","responseType","params","response","e","Error","__SERVER_SIDE_ERRORS__","errors","get","post","put","del","compose","rootId","items","root","find","composeSubTree","leaf","filter","l","parentID","filters","API","HTTP","rootJsons","roots","deserialize","jsons","updatedJob","Tree","loadRoots","updateJob","destroy","statuses","push","s","every","getInput","INDEX","Update","Index","Destroy","dispatch","getState","Jobs","update","StatusComponent","title","sign","Badge","JobLog","content","reverse","loadLogs","JobComponent","state","showLogs","showOutput","updateItem","bind","showInput","JSON","parse","style","fontSize","width","overflow","renderInput","ButtonGroup","size","Button","onClick","renderLogs","src","collapsed","displayDataTypes","enableClipboard","Card","overflowY","jobLog","then","expandTreeLeaf","setState","JobLogs","confirm","React","Component","ReactRedux","ownProps","Actions","builder","item","TreeLeafComponent","opened","toggle","expand","classnames","TreeLeaves","Paginator","onPageLinkClick","maxPage","Array","apply","renderPageLink","pageNumber","current","page","event","preventDefault","onPageChange","FiltersComponent","onChange","value","name","checked","IsPeriodical","htmlFor","placeholder","Type","formData","currentTarget","RootsList","loading","onFiltersChange","loadItems","Leaf","newPage","Math","max","App","Row","Col","md","Boolean","match","defaultState","reducer","action","newJob","existingJob","j","unshift","slice","indexOf","rootReducer","combineReducers","actionToPlainObjectMiddleware","store","next","val","composeEnhancers","Redux","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","enhancers","ReduxThunk","preloadedState","createRootReducer","createStore","handle","socket","WSIO","connect","on","console","log","subscriptionManager","subscribe","subscription","message","payload","JobActions","error","code","reason","stringify","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7144fe34.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Container, Navbar } from 'react-bootstrap'\n\ntype Props = React.PropsWithChildren<{\n  widget?: boolean\n}>\n\nconst Layout: React.FC<Props> = (props: Props) => {\n  const isWidget = props.widget || false\n\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"\">\n          🥋 High kick\n        </Navbar.Brand>\n      </Navbar>\n      <Container className={isWidget ? \"m-0 p-0\" : undefined}>\n        { props.children }\n      </Container>\n    </>);\n}\n\nexport default Layout;\n","import TreeLeaf from './tree_leaf'\n\nexport type Status = 'initial' | 'processing' | 'failed' | 'completed'\n\ntype Props = {\n  id: number\n  type: string\n  path: string\n  sid: string\n  input: string\n  output: string\n  status: Status\n  treeStatus?: Status\n  createdAt: string\n  cron?: string\n  logsCount: number\n\n  childs: Job[]\n}\n\nclass Job implements Props, TreeLeaf {\n  id: number = 0\n  type: string = ''\n  path: string = ''\n  sid: string = ''\n  input: string = ''\n  output: string = ''\n  status: Status = 'initial'\n  treeStatus?: Status = undefined\n  createdAt: string = ''\n  cron?: string = undefined\n  logsCount: number = 0\n\n  childs: Job[] = []\n\n  constructor(props: Partial<Props>) {\n    // super()\n    for(const prop in props) {\n      (this as any)[prop] = (props as any)[prop]\n    }\n  }\n\n  isRoot() {\n    return this.path === ''\n  }\n\n  isPeriodical() {\n    return this.cron !== undefined\n  }\n\n  parentID() {\n    if (this.isRoot()) {\n      return null\n    }\n    const ids = this.path.split('/').map(i => parseInt(i))\n    return ids[ids.length - 1]\n  }\n\n  // TODO: use hash function\n  digest(): string {\n    const childsDigest = this.childs.map(c => c.digest()).join()\n    return `${this.id}${this.status}${this.treeStatus}${childsDigest}`\n  }\n\n  static deserialize(json: any): Job {\n    const job = new Job(json as Partial<Props>)\n    return job\n  }\n}\n\nexport default Job","const {protocol, hostname} = window.location\n\nconst env = process.env.NODE_ENV\n\nconst BASE = {\n  'development': `${protocol}//${hostname}:8000`,\n  'production': window.location.origin,\n  'test': window.location.origin\n}[env]\n\nconst API_BASE = `${BASE}/highkick`\n\nconst URLS = {\n  ws: `ws${window.location.protocol === 'https:' ? 's' : ''}://${API_BASE.split(\"//\")[1]}/ws`,\n  jobs: {\n    job: (id: number) => `${API_BASE}/jobs/${id}`,\n    retry: (id: number) => `${API_BASE}/jobs/${id}/retry`,\n    retryFailedLeaves: (id: number) => `${API_BASE}/jobs/${id}/retry_failed_leaves`,\n    subtree: (id: number) => `${API_BASE}/jobs/${id}/subtree`,\n    input: (id: number) => `${API_BASE}/jobs/${id}/input`,\n  },\n  jobRoots: {\n    index: `${API_BASE}/job_roots`\n  },\n  jobLogs: {\n    index: (jobId: number) => `${API_BASE}/jobs/${jobId}/logs`,\n  }\n}\n\nexport default { URLS }","import Axios from 'axios'\n\ntype HTTP_METHOD = 'get' | 'post' | 'put' | 'delete'\n\nconst DEFAULT_HEADERS = {\n  'Accept': 'application/json',\n  'Content-Type': 'application/json',\n}\n\nasync function makeRequest(method: HTTP_METHOD, url: string, data: any = null) {\n  const headers = Object.assign({}, DEFAULT_HEADERS)\n  let dataToSend = Object.assign({}, data)\n\n  // File uploading\n  //\n  const hasFiles = ((<any>Object).values(dataToSend).some((v: any) => v instanceof File))\n  if (hasFiles) {\n    headers['Content-Type'] = 'multipart/form-data'\n    const _data = new FormData()\n    for (const key of Object.keys(dataToSend)) {\n      _data.append(key, dataToSend[key])\n    }\n    dataToSend = _data\n  }\n\n  let response \n  try {\n    response = await Axios.request({\n      method, url, \n      data: dataToSend,\n      headers: headers,\n      // withCredentials: true,\n      responseType: 'json',\n      params: (method === 'get') ? dataToSend : undefined\n    })\n  } catch (error) {\n    if (!error.response) {\n      throw error\n    }\n    \n    if (error.response.status === 422) {\n      const e: any = new Error('422 response')\n       // NOTE: Client-server integration convention\n      e.__SERVER_SIDE_ERRORS__ = error.response.data.errors\n      throw e\n    }\n\n    throw error\n  }\n  \n  return response.data\n}\n\nasync function get(url: string, data: any = {}) {\n  return makeRequest('get', url, data)\n}\n\nasync function post(url: string, data: any = null) {\n  return makeRequest('post', url, data)\n}\n\nasync function put(url: string, data: any = null) {\n  return makeRequest('put', url, data)\n}\n\nasync function del(url: string, data: any = null) {\n  return makeRequest('delete', url, data)\n}\n\nexport default { get, post, put, del }\n","import TreeLeaf from '../models/tree_leaf'\n\nfunction compose<Item extends TreeLeaf>(params: {\n  rootId: number,\n  items: Item[]\n}) {\n  const { rootId, items } = params\n\n  const root = items.find(i => i.id === rootId)\n  if (!root) {\n    throw new Error('No root found')\n  }\n\n  const composeSubTree = (leaf: TreeLeaf) => {\n    leaf.childs = items.filter(l => l.parentID() === leaf.id)\n    for(const child of leaf.childs) {\n      composeSubTree(child)\n    }\n  }\n\n  composeSubTree(root)\n  return root\n}\n\nexport default { compose }","import Job, { Status } from '../models/job'\nimport Filters from '../models/filters'\n\nimport API from './api'\nimport HTTP from '../lib/http'\n\nimport Tree from './tree'\n\nasync function loadRoots(filters: Filters, params: { page: number }) {\n  const data = Object.assign({}, params, { filters })\n  const url = API.URLS.jobRoots.index\n  const rootJsons = await HTTP.get(url, data)\n  const roots = rootJsons.map(Job.deserialize)\n  return roots\n}\n\nasync function updateJob(job: Job) {\n  const jsons = await HTTP.get(API.URLS.jobs.subtree(job.id))\n  const jobs = jsons.map(Job.deserialize)\n  const updatedJob = Tree.compose<Job>({\n    items: jobs,\n    rootId: job.id\n  })\n  return updatedJob\n}\n\nasync function retry(job: Job) {\n  await HTTP.post(API.URLS.jobs.retry(job.id))\n}\n\nasync function retryFailedLeaves(job: Job) {\n  await HTTP.post(API.URLS.jobs.retryFailedLeaves(job.id))\n}\n\nasync function destroy(job: Job) {\n  await HTTP.del(API.URLS.jobs.job(job.id))\n}\n\nfunction treeStatus(job: Job): Status {\n  const statuses = job.childs.map(treeStatus)\n  statuses.push(job.status)\n\n  if (statuses.some(s => s === 'processing')) {\n    return 'processing'\n  }\n\n  if (statuses.some(s => s === 'failed')) {\n    return 'failed'\n  }\n\n  if (statuses.every(s => s === 'completed')) {\n    return 'completed'\n  }\n\n  if (statuses.every(s => s === 'initial')) {\n    return 'initial'\n  }\n\n  return 'processing'\n}\n\nasync function getInput(job: Job) {\n  const url = API.URLS.jobs.input(job.id)\n  const data = await HTTP.get(url)\n  return data\n}\n\nexport default { loadRoots, updateJob, retry, retryFailedLeaves, destroy, treeStatus, getInput }\n","import ReduxState from '../state'\nimport Job from '../../models/job'\nimport Filters from '../../models/filters'\n\nimport Jobs from '../../services/jobs'\n\n// Types\n\nexport const INDEX = 'JOBS/INDEX'\nexport const UPDATE = 'JOBS/UPDATE'\nexport const DESTROY = 'JOBS/DESTROY'\n\n// Actions\n\nexport class Update {\n  type = UPDATE\n  constructor(public job: Job) { }\n}\n\nexport class Index {\n  type = INDEX\n  constructor(public jobs: Job[]) { }\n}\n\nexport class Destroy {\n  type = DESTROY\n  constructor(public job: Job) { }\n}\n\n// Action creators\n\nfunction index(filters: Filters, params: { page: number }) {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    const jobs = await Jobs.loadRoots(filters, params)\n    dispatch(new Index(jobs))\n  }\n}\n\nfunction update(job: Job) {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    let updatedJob = await Jobs.updateJob(job)\n    dispatch(new Update(updatedJob))\n  }\n}\n\nfunction destroy(job: Job) {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    await Jobs.destroy(job)\n    dispatch(new Destroy(job))\n  }\n}\n\nfunction getInput(job: Job) {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    const input = await Jobs.getInput(job)\n    return input\n  }\n}\n\nexport default { index, update, destroy, getInput }","import React from 'react'\nimport { Badge } from 'react-bootstrap'\n\nimport { Status } from '../../models/job'\n\ntype Props = {\n  title?: string\n  status: Status\n}\n\nconst StatusComponent: React.FC<Props> = (props: Props) => {\n  const { title, status } = props\n\n  const variant = (status === 'completed') ? 'success' : ((status === 'failed') ? 'danger' : 'info' )\n  const sign = (status === 'completed') ? '✌' : ((status === 'failed') ? '✘' : '༗' )\n  return (\n    <h5 className=\"m-0 p-0\">\n      <Badge variant={variant}>{title}{sign}</Badge>\n    </h5>)\n}\n\nexport default StatusComponent","type Props = {\n  id: number\n  content: string\n  createdAt: string\n}\n\nclass JobLog implements Props {\n  id: number = 0\n  content: string = ''\n  createdAt: string = ''\n\n  constructor(props: Partial<Props>) {\n    if(props.id) { this.id = props.id }\n    if(props.content) { this.content = props.content }\n    if(props.createdAt) { this.createdAt = props.createdAt }\n  }\n\n  static deserialize(json: any): JobLog {\n    const model = new JobLog(json as Partial<Props>)\n    return model\n  }\n}\n\nexport default JobLog","import Job from '../models/job'\nimport JobLog from '../models/job_log'\n\nimport API from './api'\nimport HTTP from '../lib/http'\n\nasync function loadLogs(job: Job) {\n  const data = await HTTP.get(API.URLS.jobLogs.index(job.id))\n  const roots = data.map(JobLog.deserialize).reverse()\n  return roots\n}\n\nexport default { loadLogs }\n","import React from 'react'\nimport * as ReactRedux from 'react-redux'\n\nimport ReduxState from './../../redux/state'\nimport Actions from '../../redux/actions/jobs'\n\nimport ReactJsonView from 'react-json-view'\nimport { ButtonGroup, Button, Card } from 'react-bootstrap'\n\nimport StatusComponent from './status'\n\nimport Job from '../../models/job'\nimport JobLog from '../../models/job_log'\nimport Jobs from '../../services/jobs'\nimport JobLogs from '../../services/job_logs'\n\ntype Props = {\n  job: Job\n  expandTreeLeaf: () => any\n\n  update?: (job: Job) => Promise<any>\n  destroy?: () => any\n  getInput?: () => Promise<any>\n}\n\ntype State = {\n  showLogs: boolean\n  jobLogs: JobLog[]\n  input: any\n  showOutput: boolean\n}\n\nclass JobComponent extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n\n    this.state = {\n      showLogs: false,\n      jobLogs: [],\n      input: null,\n      showOutput: false,\n    }\n\n    this.updateItem = this.updateItem.bind(this)\n    this.showLogs = this.showLogs.bind(this)\n    this.retry = this.retry.bind(this)\n    this.retryFailedLeaves = this.retryFailedLeaves.bind(this)\n    this.destroy = this.destroy.bind(this)\n    this.showInput = this.showInput.bind(this)\n    this.showOutput = this.showOutput.bind(this)\n  }\n\n  render() {\n    const { job } = this.props\n    const treeStatus = job.treeStatus || Jobs.treeStatus(job)\n    const input = job.input !== \"\" ? JSON.parse(job.input) : {}\n    const output = job.output !== \"\" ? JSON.parse(job.output) : {}\n\n    return (\n      <>\n        <div className=\"d-flex\">\n          <div className=\"mr-1 text-muted\" style={{ fontSize: 12 }}>{job.id}</div>\n          <div\n            className=\"mr-1 font-italic\"\n            style={{fontSize: '12px', width: '160px', overflow: 'scroll'}}\n          >\n            {job.type}<br/>\n            {job.cron}\n          </div>\n          <div className=\"flex-fill d-flex flex-column\">\n            <div className=\"text-muted\" style={{ fontSize: 12 }}>Created at: {job.createdAt}</div>\n            {this.renderInput()}\n          </div>\n          <div className=\"mr-1\">\n            <StatusComponent status={job.status}/>\n          </div>\n          <div className=\"mr-1\">\n            {(job.childs.length > 0 || job.isRoot()) && <StatusComponent status={treeStatus} title=\"🌳\"/>}\n          </div>\n          <div>\n            <ButtonGroup size=\"sm\">\n              <Button variant=\"light\" onClick={this.updateItem}>👁</Button>\n              <Button variant=\"light\" className=\"text-muted\" onClick={this.showLogs}>Logs</Button>\n              <Button variant=\"light\" className=\"text-success\" onClick={this.retry}>↻</Button>\n              { (treeStatus !== 'completed' && (job.childs.length > 0 || job.isRoot())) && <Button variant=\"light\" className=\"text-success\" onClick={this.retryFailedLeaves}>↻ 🍂</Button> }\n              <Button variant=\"light\" onClick={this.destroy}>🗑</Button>\n            </ButtonGroup>\n          </div>\n        </div>\n        { this.renderLogs() }\n      </>)\n  }\n\n  renderInput() {\n    const { job } = this.props\n    const { input, showOutput } = this.state\n    const output = job.output !== \"\" ? JSON.parse(job.output) : {}\n\n    return (\n      <>\n        { !input && (\n          <Button size=\"sm\" variant=\"light\"\n            className=\"w-100 m-0 p-0\"\n            onClick={this.showInput}\n            style={{fontSize: 10}}\n          >Input</Button>) }\n        { input && (\n          <ReactJsonView\n            src={input}\n            collapsed={true}\n            displayDataTypes={false}\n            enableClipboard={false}\n            style={{fontSize: 10}}\n          />\n        ) }\n        { !showOutput && (\n          <Button size=\"sm\" variant=\"light\"\n            className=\"w-100 m-0 p-0\"\n            onClick={this.showOutput}\n            style={{fontSize: 10}}\n          >Output</Button>) }\n        { showOutput && <ReactJsonView\n          src={output}\n          collapsed={true}\n          displayDataTypes={false}\n          enableClipboard={false}\n          style={{fontSize: 10}}\n        /> }\n      </>)\n  }\n\n  renderLogs() {\n    const { showLogs, jobLogs } = this.state\n\n    if (!showLogs) { return null }\n    return (\n      <Card className=\"mt-2 mb-2 bg-light\" style={{ fontSize: '12px', overflowY: 'scroll' }}>\n        { jobLogs.map(jobLog => {\n          return (\n            <div className=\"d-flex\" key={jobLog.id}>\n              <div style={{width: 150}}>{jobLog.createdAt}</div>\n              <div className=\"flex-fill\">{jobLog.content}</div>\n            </div>)\n        }) }\n      </Card>\n    )\n  }\n\n  private updateItem() {\n    const { job } = this.props\n    this.props.update!(job).then(() => {\n      this.props.expandTreeLeaf()\n    })\n  }\n\n  private showLogs() {\n    const { job } = this.props\n    const { showLogs } = this.state\n\n    if (showLogs) {\n      this.setState({ showLogs: false })\n      return\n    }\n\n    (async () => {\n      let jobLogs = await JobLogs.loadLogs(job)\n      this.setState({ showLogs: true, jobLogs })\n    })()\n  }\n\n  private retry() {\n    const { job } = this.props;\n    if (window.confirm('Do you wanna to retry this job?') === false) {\n      return\n    }\n\n    (async () => {\n      await Jobs.retry(job)\n    })()\n  }\n\n  private retryFailedLeaves() {\n    const { job } = this.props;\n    if (window.confirm('Do you wanna to retry failed children of this job?') === false) {\n      return\n    }\n\n    (async () => {\n      await Jobs.retryFailedLeaves(job)\n    })()\n  }\n\n  private destroy() {\n    if (window.confirm('Do you wanna to destroy this job?') === false) {\n      return\n    }\n    this.props.destroy!()\n  }\n\n  private showInput() {\n    this.props.getInput!().then(input => {\n      this.setState({ input })\n    })\n  }\n\n  private showOutput() {\n    this.setState({ showOutput: true })\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => {\n  const { job } = ownProps\n  return {\n    update: (job: Job) => dispatch(Actions.update(job)),\n    destroy: () => dispatch(Actions.destroy(job)),\n    getInput: () => dispatch(Actions.getInput(job)),\n  }\n}\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(JobComponent)","import React from 'react'\n\nimport LeafBuilder from './../tree/builder'\n\nimport Job from '../../models/job'\nimport ItemComponent from './item'\n\nconst builder: LeafBuilder<Job> = props => {\n  return (\n    <ItemComponent\n      job={props.item}\n      expandTreeLeaf={props.expandTreeLeaf}\n    />)\n}\n\nexport default { builder }","import React from 'react'\nimport classnames from 'classnames'\n\nimport { Button } from 'react-bootstrap'\n\nimport TreeLeaf from '../../models/tree_leaf'\nimport Builder from './builder'\nimport Leaves from './leaves'\n\ntype Props<Item> = {\n  item: Item\n  builder: Builder<Item>\n}\n\ntype State = {\n  opened: boolean\n}\n\nclass TreeLeafComponent<Item extends TreeLeaf> extends React.Component<Props<Item>, State> {\n  constructor(props: Props<Item>) {\n    super(props)\n\n    this.state = {\n      opened: props.item.isRoot() ? false : true\n    }\n\n    this.toggle = this.toggle.bind(this)\n    this.expand = this.expand.bind(this)\n  }\n\n  render() {\n    const { item, builder } = this.props\n    const { opened } = this.state\n\n    return (\n      <li className=\"list-group-item p-0\">\n        <div className=\"d-flex\">\n          <div style={{width: 40}}>\n            <Button variant=\"light\" size=\"sm\" onClick={this.toggle}>\n              { opened ? '↘' : '↗'}\n            </Button>\n          </div>\n          <div className=\"flex-fill\" key={item.digest()}>\n            {builder({ item, expandTreeLeaf: this.expand })}\n            <div className={classnames({'d-none': !opened})}>\n              <Leaves\n                items={item.childs as Item[]}\n                builder={builder}\n              />\n            </div>\n          </div> \n        </div>\n      </li>)\n  }\n\n  private toggle() {\n    this.setState({\n      opened: !this.state.opened\n    })\n  }\n\n  private expand() {\n    this.setState({\n      opened: true\n    })\n  }\n}\n\nexport default TreeLeafComponent","import React from 'react'\nimport classnames from 'classnames'\n\nimport TreeLeafInterface from '../../models/tree_leaf'\nimport Builder from './builder'\nimport Leaf from './leaf'\n\ntype Props<Item> = {\n  items: Item[]\n  builder: Builder<Item>\n}\n\nclass TreeLeaves<Item extends TreeLeafInterface> extends React.Component<Props<Item>> {\n  render() {\n    const { items, builder } = this.props\n\n    return (\n      <ul className={classnames('list-group', 'p-0')}>\n        { items.map(item => {\n          return (\n            <Leaf\n              key={item.id}\n              item={item}\n              builder={builder}\n            />)\n        }) }\n      </ul>)\n  }\n}\n\nexport default TreeLeaves","import React from 'react'\n\ntype Props = {\n  page: number\n  maxPage: number\n  onPageChange: (page: number) => any\n}\n\nclass Paginator extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props)\n    this.onPageLinkClick = this.onPageLinkClick.bind(this)\n  }\n\n  render() {\n    const { maxPage } = this.props\n\n    return (\n      <nav>\n        <ul className=\"pagination\">\n          { Array.apply(null, Array(maxPage)).map((v, i) => {\n            return this.renderPageLink(i + 1)\n          }) }\n        </ul>\n      </nav>)\n  }\n\n  private renderPageLink(pageNumber: number) {\n    const { page } = this.props\n    const current = page === pageNumber\n\n    return (\n      <li className=\"page-item\" key={pageNumber}>\n        { current && (\n            <span className=\"page-link\">\n              {pageNumber}\n            </span>) }\n      \n        { !current && (\n            <a className=\"page-link\" href=\"#\" onClick={(event) => this.onPageLinkClick(event, pageNumber)}>\n              {pageNumber}\n            </a>) }\n      </li>)\n  }\n\n  private onPageLinkClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>, page: number) {\n    event.preventDefault()\n    this.props.onPageChange(page)\n  }\n}\n\nexport default Paginator","import React from 'react'\n\nimport Filters from '../../models/filters'\n\ntype Props = {\n  value: Filters\n  onChange: (value: Filters) => any\n}\n\nclass FiltersComponent extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props)\n    this.onChange = this.onChange.bind(this)\n  }\n\n  render() {\n    const { value } = this.props\n    return (\n      <form onChange={this.onChange} className=\"alert alert-info\">\n        <div className=\"form-row\">\n          <div className=\"col-7\">\n            <div className=\"form-check form-check-inline\">\n              <input \n                className=\"form-check-input\"\n                type=\"radio\"\n                name=\"IsPeriodical\"\n                id=\"IsPeriodicalTrue\"\n                value=\"1\"\n                checked={value.IsPeriodical === true}\n              />\n              <label className=\"form-check-label\" htmlFor=\"IsPeriodicalTrue\">\n                Periodical\n              </label>\n            </div>\n            <div className=\"form-check form-check-inline\">\n              <input\n                className=\"form-check-input\"\n                type=\"radio\"\n                name=\"IsPeriodical\"\n                id=\"IsPeriodicalFalse\"\n                value=\"0\"\n                checked={value.IsPeriodical === false}\n              />\n              <label className=\"form-check-label\" htmlFor=\"IsPeriodicalFalse\">\n                Non periodical\n              </label>\n            </div>\n          </div>\n          <div className=\"col-5\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              name=\"Type\"\n              placeholder=\"Job\"\n              value={value.Type}\n            />\n          </div>\n        </div>\n      </form>\n    )\n  }\n\n  private onChange(event: React.FormEvent<HTMLFormElement>) {\n    const formData = new FormData(event.currentTarget)\n    const value: Filters = {}\n    if (formData.get(\"IsPeriodical\") === \"1\") { value.IsPeriodical = true }\n    if (formData.get(\"IsPeriodical\") === \"0\") { value.IsPeriodical = false }\n    if (formData.get(\"Type\") !== \"\") { value.Type = formData.get(\"Type\") as string }\n    this.props.onChange(value)\n  }\n}\n\nexport default FiltersComponent","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport ReduxState from './../../redux/state'\nimport Actions from '../../redux/actions/jobs'\n\nimport Job from '../../models/job'\nimport Filters from '../../models/filters'\nimport Leaf from './leaf'\nimport TreeLeaves from '../tree/leaves'\nimport Paginator from '../misc/paginator'\nimport FiltersComponent from './filters'\n\ntype Props = {\n  roots?: Job[]\n  index?: (filters: Filters, params: { page: number }) => any\n}\ntype State = {\n  filters: Filters\n  loading: boolean\n  page: number\n  maxPage: number\n}\n\nclass RootsList extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n\n    this.state = {\n      loading: true,\n      page: 1,\n      maxPage: 1,\n      filters: {\n        IsPeriodical: false\n      }\n    }\n    \n    this.onPageChange = this.onPageChange.bind(this)\n    this.onFiltersChange = this.onFiltersChange.bind(this)\n  }\n\n  componentDidMount() {\n    this.loadItems(1).then(() => {})\n  }\n\n  render() {\n    const { roots } = this.props\n    const { loading, page, maxPage } = this.state\n\n    if (loading) {\n      return (\n        <div className=\"d-flex w-100 h-100\">\n          <div className=\"m-auto\">Loading</div>\n        </div>\n      )\n    }\n\n    return (\n      <>\n        <FiltersComponent\n          value={this.state.filters}\n          onChange={this.onFiltersChange}\n        />\n        <TreeLeaves\n          items={roots! || []}\n          builder={Leaf.builder}\n        />\n        <Paginator page={page} maxPage={maxPage} onPageChange={this.onPageChange}/>\n      </>)\n  }\n\n  private onPageChange(newPage: number) {\n    this.loadItems(newPage).then(() => {})\n  }\n\n  private async loadItems(page: number) {\n    const { filters, maxPage } = this.state\n    await this.props.index!(filters, { page })\n    this.setState({\n      loading: false,\n      page,\n      maxPage: Math.max(maxPage, page + 1),\n    })\n  }\n\n  private onFiltersChange(filters: Filters) {\n    this.setState({\n      filters\n    }, () => {\n      this.loadItems(1).then(() => {})\n    })\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({\n  roots: state.jobs\n})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({\n  index: (filters: Filters, params: { page: number }) => dispatch(Actions.index(filters, params)),\n})\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(RootsList)","import React from 'react';\n\nimport { Row, Col } from 'react-bootstrap'\n\nimport Layout from './components/layout'\nimport JobRootsList from './components/jobs/roots'\n\nconst App: React.FC = () => {\n  return (\n    <Layout>\n      <Row>\n        <Col md={12} className=\"pt-2\">\n          <JobRootsList/>\n        </Col>\n      </Row>\n    </Layout>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as Actions from '../actions/jobs'\nimport Job from '../../models/job'\n\nexport type State = Job[]\n\nconst defaultState: State = []\n\ntype Action = Actions.Index | Actions.Update | Actions.Destroy\nexport default function reducer(state: State = defaultState, action: Action) {\n  switch (action.type) {\n    case Actions.INDEX: {\n      const a = action as Actions.Index\n      return a.jobs\n    }\n    case Actions.UPDATE: {\n      const a = action as Actions.Update\n      const newJob = a.job\n      \n      const existingJob = state.find((j: Job) => j.id === a.job.id)\n\n      // New root job\n      if (!existingJob && newJob.isRoot()) {\n        state.unshift(newJob)\n        return state.slice(0)\n      }\n\n      // In the list already\n      if (existingJob) {\n        const index = state.indexOf(existingJob)\n        state[index] = newJob\n        return state.slice(0)\n      }\n      \n      return state\n    }\n    case Actions.DESTROY: {\n      const a = action as Actions.Destroy\n      return state.filter(j => j.id !== a.job.id)\n    }\n  }\n\n  return state\n}","import { combineReducers } from 'redux'\n\nimport jobs from './jobs'\n\nconst rootReducer = () => combineReducers({\n  jobs,\n})\n\nexport default rootReducer","import * as Redux from 'redux'\n\n// Middleware for allowing actions to be class instances\nconst actionToPlainObjectMiddleware: Redux.Middleware<any, any> = store => next => action => {\n  function isObjectLike(val: any): val is {} {\n    return val !== undefined && val !== null && typeof val === 'object'\n   }\n  if (isObjectLike(action)) {\n    return next({ ...action } as any)\n  }\n  return next(action)\n}\n\nexport default actionToPlainObjectMiddleware","import * as Redux from 'redux'\nimport ReduxThunk from 'redux-thunk'\n\nimport createRootReducer from './reducers'\n\nimport actionToPlainObjectMiddleware from './plain_object_middleware'\n\ndeclare var window: {\n  __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: any,\n  __USE_MEMORY_HISTORY__?: boolean\n}\n\nlet composeEnhancers = Redux.compose\n\n// FIXME: https://github.com/zalmoxisus/redux-devtools-extension/issues/588\nif (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n  composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n}\n\n// Build the middleware for intercepting and dispatching navigation actions\nconst middlewares = Redux.applyMiddleware(\n  ReduxThunk,\n  actionToPlainObjectMiddleware\n)\nconst enhancers = composeEnhancers(middlewares)\n\nfunction createStore(preloadedState: any = {}) {\n  const rootReducer = createRootReducer()\n  const store = Redux.createStore(rootReducer, preloadedState, enhancers)\n  return store\n}\n\nconst store = createStore()\nexport { store, createStore }","import * as WSIO from 'ws.io'\nimport { store } from '../redux/store'\n\nimport API from './api'\nimport Job from '../models/job'\nimport * as JobActions from '../redux/actions/jobs'\n// import EventEmitter from './event_emitter'\n\nfunction handle() {\n  const socket = WSIO.Socket.connect(API.URLS.ws)\n  socket.on('open', () => {\n    console.log('[WS] Connected')\n\n    const subscriptionManager = new WSIO.SubscriptionManager(socket)\n    \n    subscriptionManager.subscribe('time').then(subscription => {\n      console.log('[WS] Subscribed on `time`')\n      subscription.on('message', message => {\n        console.log('[WS] [time]', message)\n      })\n    })\n\n    subscriptionManager.subscribe('jobs').then(subscription => {\n      console.log('[WS] Subscribed on `jobs`: ', subscription)\n      subscription.on('message', (message: WSIO.Message) => {\n        console.log('[WS] [jobs]', message)\n        const job = Job.deserialize(message.payload.job)\n\n        // Update redux\n        store.dispatch(new JobActions.Update(job))\n\n        // Notify via event emitter\n        // const status = job.treeStatus || job.status\n        // if (status === 'completed') {\n        //   EventEmitter.notifyJobCompleted(job)\n        // } else if (status === 'failed') {\n        //   EventEmitter.notifyJobFailed(job)\n        // }\n      })\n    })\n  })\n\n  socket.on('error', (error) => {\n    console.error(`Socket error ${error && error.message ? error.message : error}`)\n  })\n\n  socket.on('dead', () => {\n    console.error(`[WS] Socket become dead`)\n  })\n\n  socket.on('close', (code, reason) => {\n    console.error(`[WS] Socket closed ${code} ${reason}`)\n  })\n\n  socket.on('message', (message) => {\n    console.log(`[WS] Got message ${JSON.stringify(message)}`)\n  })\n}\n\nexport default { handle }","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app'\nimport * as serviceWorker from './serviceWorker'\nimport WS from './services/ws'\n\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store'\n\nWS.handle()\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}