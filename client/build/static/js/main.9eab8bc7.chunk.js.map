{"version":3,"sources":["models/job_meta.ts","services/api.ts","lib/http.ts","services/job_metas.ts","redux/actions/job_metas.ts","components/layout.tsx","models/job.ts","services/tree.ts","services/jobs.ts","redux/actions/jobs.ts","components/jobs/status.tsx","models/job_log.ts","services/job_logs.ts","components/jobs/item.tsx","components/tree/leaf.tsx","components/tree/leaves.tsx","components/misc/paginator.tsx","components/jobs/filters.tsx","components/jobs/roots.tsx","pages/index.tsx","components/misc/json_editor.tsx","pages/new.tsx","router.tsx","redux/reducers/jobs.ts","redux/reducers/job_metas.ts","redux/reducers/index.ts","redux/middlewares/plain_object_middleware.ts","redux/store.ts","app.tsx","serviceWorker.ts","index.tsx"],"names":["JobMeta","props","prop","SID","Title","InputJSONSchema","this","json","window","location","protocol","hostname","BASE","origin","API_BASE","URLS","ws","split","jobs","job","id","retry","retryFailedLeaves","subtree","input","run","destroy","jobRoots","index","jobLogs","jobId","jobMetas","DEFAULT_HEADERS","makeRequest","method","url","a","data","headers","Object","assign","dataToSend","values","some","v","File","_data","FormData","keys","key","append","Axios","request","responseType","params","undefined","response","status","e","Error","__SERVER_SIDE_ERRORS__","errors","get","post","put","del","API","HTTP","items","map","deserialize","INDEX","Index","type","dispatch","getState","JobMetas","Layout","isWidget","widget","Navbar","bg","variant","className","Brand","href","src","height","width","Container","children","Job","path","sid","output","treeStatus","createdAt","cron","logsCount","childs","isRoot","ids","i","parseInt","length","childsDigest","c","digest","join","compose","rootId","root","find","composeSubTree","leaf","filter","l","parentID","filters","rootJsons","roots","jsons","updatedJob","Tree","Input","loadRoots","loadSubtree","statuses","push","s","every","getInput","runJob","Update","Destroy","Jobs","StatusComponent","JobLog","content","reverse","loadLogs","JobComponent","state","showLogs","showInputOutput","loadItem","bind","item","expanded","JSON","parse","jobMeta","candidate","style","display","gridTemplateAreas","gridTemplateColumns","gridGap","background","stringify","gridArea","cursor","onClick","renderStatus","Moment","fromNow","Button","zoom","collapsed","fontSize","displayDataTypes","jobLog","onExpand","JobLogs","setState","confirm","React","Component","ReactRedux","ownProps","Actions","TreeLeafComponent","builder","createElement","classnames","TreeLeaves","Paginator","onPageLinkClick","maxPage","Array","apply","renderPageLink","pageNumber","current","page","border","event","preventDefault","onPageChange","FiltersComponent","onChange","value","name","defaultChecked","IsPeriodical","htmlFor","placeholder","Type","to","formData","currentTarget","RootsList","loading","onFiltersChange","loadItems","then","Item","newPage","Math","max","App","MyJSONEditor","elRef","createRef","jsonEditor","JSONEditor","theme","schema","jsonSchema","disable_array_reorder","array_controls_top","form_name_root","label","no_additional_properties","show_errors","object_layout","remove_empty_properties","setValue","defaultValue","on","ref","getValue","onJobSIDChange","onSubmit","Form","Group","Label","Control","as","custom","renderInputEditor","jobSID","newValue","alert","reload","target","Router","exact","component","New","defaultState","reducer","action","newJob","existingJob","j","unshift","slice","indexOf","rootReducer","history","combineReducers","router","connectRouter","actionToPlainObjectMiddleware","store","next","val","composeEnhancers","Redux","__USE_MEMORY_HISTORY__","History","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","enhancers","routerMiddleware","ReduxThunk","preloadedState","createRootReducer","createStore","indexJobMetas","Row","Col","md","JobMetaActions","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9eab8bc7.chunk.js","sourcesContent":["type Props = {\n  SID: string\n  Title: string\n  InputJSONSchema?: string\n}\n\nclass JobMeta implements Props {\n  SID!: string\n  Title!: string\n  InputJSONSchema?: string\n\n  constructor(props: Partial<Props>) {\n    // super()\n    for(const prop in props) {\n      (this as any)[prop] = (props as any)[prop]\n    }\n  }\n\n  static deserialize(json: any): JobMeta {\n    const job = new JobMeta(json as Partial<Props>)\n    return job\n  }\n}\n\nexport default JobMeta","const {protocol, hostname} = window.location\n\nconst env = process.env.NODE_ENV\n\nconst BASE = {\n  'development': `${protocol}//${hostname}:8000`,\n  'production': window.location.origin,\n  'test': window.location.origin\n}[env]\n\nconst API_BASE = `${BASE}/highkick`\n\nconst URLS = {\n  ws: `ws${window.location.protocol === 'https:' ? 's' : ''}://${API_BASE.split(\"//\")[1]}/ws`,\n  jobs: {\n    job: (id: number) => `${API_BASE}/jobs/show/${id}`,\n    retry: (id: number) => `${API_BASE}/jobs/retry/${id}`,\n    retryFailedLeaves: (id: number) => `${API_BASE}/jobs/retry_failed_leaves/${id}`,\n    subtree: (id: number) => `${API_BASE}/jobs/subtree/${id}`,\n    input: (id: number) => `${API_BASE}/jobs/input/${id}`,\n    run: `${API_BASE}/jobs/run`,\n    destroy: (id: number) => `${API_BASE}/jobs/delete/${id}`,\n  },\n  jobRoots: {\n    index: `${API_BASE}/job_roots/index`\n  },\n  jobLogs: {\n    index: (jobId: number) => `${API_BASE}/job_logs/index/${jobId}`,\n  },\n  jobMetas: {\n    index: `${API_BASE}/job_metas/index`,\n  }\n}\n\nexport default { URLS }","import Axios from 'axios'\n\ntype HTTP_METHOD = 'get' | 'post' | 'put' | 'delete'\n\nconst DEFAULT_HEADERS = {\n  'Accept': 'application/json',\n  'Content-Type': 'application/json',\n}\n\nasync function makeRequest(method: HTTP_METHOD, url: string, data: any = null) {\n  const headers = Object.assign({}, DEFAULT_HEADERS)\n  let dataToSend = Object.assign({}, data)\n\n  // File uploading\n  //\n  const hasFiles = ((<any>Object).values(dataToSend).some((v: any) => v instanceof File))\n  if (hasFiles) {\n    headers['Content-Type'] = 'multipart/form-data'\n    const _data = new FormData()\n    for (const key of Object.keys(dataToSend)) {\n      _data.append(key, dataToSend[key])\n    }\n    dataToSend = _data\n  }\n\n  let response \n  try {\n    response = await Axios.request({\n      method, url, \n      data: dataToSend,\n      headers: headers,\n      // withCredentials: true,\n      responseType: 'json',\n      params: (method === 'get') ? dataToSend : undefined\n    })\n  } catch (error) {\n    if (!error.response) {\n      throw error\n    }\n    \n    if (error.response.status === 422) {\n      const e: any = new Error('422 response')\n       // NOTE: Client-server integration convention\n      e.__SERVER_SIDE_ERRORS__ = error.response.data.errors\n      throw e\n    }\n\n    throw error\n  }\n  \n  return response.data\n}\n\nasync function get(url: string, data: any = {}) {\n  return makeRequest('get', url, data)\n}\n\nasync function post(url: string, data: any = null) {\n  return makeRequest('post', url, data)\n}\n\nasync function put(url: string, data: any = null) {\n  return makeRequest('put', url, data)\n}\n\nasync function del(url: string, data: any = null) {\n  return makeRequest('delete', url, data)\n}\n\nexport default { get, post, put, del }\n","import JobMeta from '../models/job_meta'\n\nimport API from './api'\nimport HTTP from '../lib/http'\n\nasync function index() {\n  const url = API.URLS.jobMetas.index\n  const response = await HTTP.get(url, {})\n  const items = (response.items as any[]).map(JobMeta.deserialize)\n  return items\n}\n\nexport default { index }\n","import ReduxState from '../state'\nimport JobMeta from '../../models/job_meta'\nimport Filters from '../../models/filters'\n\nimport JobMetas from '../../services/job_metas'\n\n// Types\n\nexport const INDEX = 'JOB_METAS/INDEX'\n\n// Actions\n\nexport class Index {\n  type = INDEX\n  constructor(public items: JobMeta[]) { }\n}\n\n// Action creators\n\nfunction index() {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    const items = await JobMetas.index()\n    dispatch(new Index(items))\n  }\n}\n\nexport default { index }","import React from 'react';\n\nimport { Container, Navbar } from 'react-bootstrap'\n\ntype Props = React.PropsWithChildren<{\n  widget?: boolean\n}>\n\nconst Layout: React.FC<Props> = (props: Props) => {\n  const isWidget = props.widget || false\n\n  return (\n    <>\n      <Navbar bg=\"light\" variant=\"light\" className=\"border-dark border-bottom\">\n        <Navbar.Brand href=\"\" className=\"p-0\">\n          <img src=\"favicon.ico\" height=\"32\" width=\"32\"/>\n          &nbsp;\n          <a href=\"/\" className=\"text-dark\">Highkick</a>\n        </Navbar.Brand>\n      </Navbar>\n      <Container className={isWidget ? \"m-0 p-0\" : undefined}>\n        { props.children }\n      </Container>\n    </>);\n}\n\nexport default Layout;\n","import TreeLeaf from './tree_leaf'\n\nexport type Status = 'initial' | 'processing' | 'failed' | 'completed'\n\ntype Props = {\n  id: number\n  type: string\n  path: string\n  sid: string\n  input: string\n  output: string\n  status: Status\n  treeStatus?: Status\n  createdAt: string\n  cron?: string\n  logsCount: number\n\n  childs: Job[]\n}\n\nclass Job implements Props, TreeLeaf {\n  id: number = 0\n  type: string = ''\n  path: string = ''\n  sid: string = ''\n  input: string = ''\n  output: string = ''\n  status: Status = 'initial'\n  treeStatus?: Status = undefined\n  createdAt: string = ''\n  cron?: string = undefined\n  logsCount: number = 0\n\n  childs: Job[] = []\n\n  constructor(props: Partial<Props>) {\n    // super()\n    for(const prop in props) {\n      (this as any)[prop] = (props as any)[prop]\n    }\n  }\n\n  isRoot() {\n    return this.path === ''\n  }\n\n  isPeriodical() {\n    return this.cron !== undefined\n  }\n\n  parentID() {\n    if (this.isRoot()) {\n      return null\n    }\n    const ids = this.path.split('/').map(i => parseInt(i))\n    return ids[ids.length - 1]\n  }\n\n  // TODO: use hash function\n  digest(): string {\n    const childsDigest = this.childs.map(c => c.digest()).join()\n    return `${this.id}${this.status}${this.treeStatus}${childsDigest}`\n  }\n\n  static deserialize(json: any): Job {\n    const job = new Job(json as Partial<Props>)\n    return job\n  }\n}\n\nexport default Job","import TreeLeaf from '../models/tree_leaf'\n\nfunction compose<Item extends TreeLeaf>(params: {\n  rootId: number,\n  items: Item[]\n}) {\n  const { rootId, items } = params\n\n  const root = items.find(i => i.id === rootId)\n  if (!root) {\n    throw new Error('No root found')\n  }\n\n  const composeSubTree = (leaf: TreeLeaf) => {\n    leaf.childs = items.filter(l => l.parentID() === leaf.id)\n    for(const child of leaf.childs) {\n      composeSubTree(child)\n    }\n  }\n\n  composeSubTree(root)\n  return root\n}\n\nexport default { compose }","import Job, { Status } from '../models/job'\nimport Filters from '../models/filters'\n\nimport API from './api'\nimport HTTP from '../lib/http'\n\nimport Tree from './tree'\n\nasync function loadRoots(filters: Filters, params: { page: number }) {\n  const data = Object.assign({}, params, { filters })\n  const url = API.URLS.jobRoots.index\n  const rootJsons = await HTTP.get(url, data)\n  const roots = rootJsons.map(Job.deserialize)\n  return roots\n}\n\nasync function loadSubtree(job: Job) {\n  const jsons = await HTTP.get(API.URLS.jobs.subtree(job.id))\n  const jobs = jsons.map(Job.deserialize)\n  const updatedJob = Tree.compose<Job>({\n    items: jobs,\n    rootId: job.id\n  })\n  return updatedJob\n}\n\nasync function retry(job: Job) {\n  await HTTP.post(API.URLS.jobs.retry(job.id))\n}\n\nasync function retryFailedLeaves(job: Job) {\n  await HTTP.post(API.URLS.jobs.retryFailedLeaves(job.id))\n}\n\nasync function destroy(job: Job) {\n  const url = API.URLS.jobs.destroy(job.id)\n  await HTTP.del(url)\n}\n\nfunction treeStatus(job: Job): Status {\n  const statuses = job.childs.map(treeStatus)\n  statuses.push(job.status)\n  if (!!job.treeStatus) { statuses.push(job.treeStatus) }\n\n  if (statuses.some(s => s === 'processing')) {\n    return 'processing'\n  }\n\n  if (statuses.some(s => s === 'failed')) {\n    return 'failed'\n  }\n\n  if (statuses.every(s => s === 'completed')) {\n    return 'completed'\n  }\n\n  if (statuses.every(s => s === 'initial')) {\n    return 'initial'\n  }\n\n  return 'processing'\n}\n\nasync function getInput(job: Job) {\n  const url = API.URLS.jobs.input(job.id)\n  const data = await HTTP.get(url)\n  return data\n}\n\nasync function runJob(sid: string, input: any) {\n  const url = API.URLS.jobs.run\n  const response = await HTTP.post(url, {\n    SID: sid,\n    Input: input,\n  })\n  return response\n}\n\nexport default { \n  loadRoots, loadSubtree, retry, retryFailedLeaves,\n  destroy, treeStatus, getInput,\n  runJob,\n}\n","import ReduxState from '../state'\nimport Job from '../../models/job'\nimport Filters from '../../models/filters'\n\nimport Jobs from '../../services/jobs'\n\n// Types\n\nexport const INDEX = 'JOBS/INDEX'\nexport const UPDATE = 'JOBS/UPDATE'\nexport const DESTROY = 'JOBS/DESTROY'\n\n// Actions\n\nexport class Update {\n  type = UPDATE\n  constructor(public job: Job) { }\n}\n\nexport class Index {\n  type = INDEX\n  constructor(public jobs: Job[]) { }\n}\n\nexport class Destroy {\n  type = DESTROY\n  constructor(public job: Job) { }\n}\n\n// Action creators\n\nfunction index(filters: Filters, params: { page: number }) {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    const jobs = await Jobs.loadRoots(filters, params)\n    dispatch(new Index(jobs))\n  }\n}\n\nfunction loadSubtree(job: Job) {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    let updatedJob = await Jobs.loadSubtree(job)\n    dispatch(new Update(updatedJob))\n  }\n}\n\nfunction destroy(job: Job) {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    await Jobs.destroy(job)\n    dispatch(new Destroy(job))\n  }\n}\n\nfunction getInput(job: Job) {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    const input = await Jobs.getInput(job)\n    return input\n  }\n}\n\nfunction run(sid: string, input: any) {\n  return async (dispatch: any, getState: () => ReduxState) => {\n    const response = await Jobs.runJob(sid, input)\n    return response\n  }\n}\n\nexport default { index, loadSubtree, destroy, getInput, run }","import React from 'react'\nimport { XCircle, Play, Check2, Hexagon } from 'react-bootstrap-icons'\n\nimport { Status } from '../../models/job'\n\ntype Props = {\n  title?: string\n  status: Status\n}\n\nconst StatusComponent: React.FC<Props> = (props: Props) => {\n  const { status } = props\n\n  switch(status) {\n    case 'initial':\n      return <Hexagon/>\n    case 'processing':\n      return <Play/>\n    case 'failed':\n      return <XCircle/>\n    case 'completed':\n      return <Check2/>\n  }\n}\n\nexport default StatusComponent","type Props = {\n  id: number\n  content: string\n  createdAt: string\n}\n\nclass JobLog implements Props {\n  id: number = 0\n  content: string = ''\n  createdAt: string = ''\n\n  constructor(props: Partial<Props>) {\n    if(props.id) { this.id = props.id }\n    if(props.content) { this.content = props.content }\n    if(props.createdAt) { this.createdAt = props.createdAt }\n  }\n\n  static deserialize(json: any): JobLog {\n    const model = new JobLog(json as Partial<Props>)\n    return model\n  }\n}\n\nexport default JobLog","import Job from '../models/job'\nimport JobLog from '../models/job_log'\n\nimport API from './api'\nimport HTTP from '../lib/http'\n\nasync function loadLogs(job: Job) {\n  const data = await HTTP.get(API.URLS.jobLogs.index(job.id))\n  const roots = data.map(JobLog.deserialize).reverse()\n  return roots\n}\n\nexport default { loadLogs }\n","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport Moment from 'moment'\n\nimport ReduxState from './../../redux/state'\nimport Actions from '../../redux/actions/jobs'\n\nimport ReactJsonView from 'react-json-view'\nimport { Button, Card } from 'react-bootstrap'\nimport { \n  ArrowRight, ArrowDown, ArrowClockwise, Trash,\n  ReceiptCutoff, BoxArrowInRight, BoxArrowRight,\n  ArrowLeftRight,\n} from 'react-bootstrap-icons'\n\nimport StatusComponent from './status'\n\nimport Job from '../../models/job'\nimport JobMeta from '../../models/job_meta'\nimport JobLog from '../../models/job_log'\nimport Jobs from '../../services/jobs'\nimport JobLogs from '../../services/job_logs'\n\ntype Props = {\n  item: Job\n  onExpand: (expanded: boolean) => any\n  expanded: boolean\n\n  jobMetas?: JobMeta[]\n  loadSubtree?: (job: Job) => Promise<any>\n  destroy?: () => any\n  getInput?: () => Promise<any>\n}\n\ntype State = {\n  showLogs: boolean\n  jobLogs: JobLog[]\n  input: any\n  showInputOutput: boolean\n}\n\nclass JobComponent extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n\n    this.state = {\n      showLogs: false,\n      jobLogs: [],\n      input: null,\n      showInputOutput: false,\n    }\n\n    this.loadItem = this.loadItem.bind(this)\n    this.showLogs = this.showLogs.bind(this)\n    this.retry = this.retry.bind(this)\n    this.retryFailedLeaves = this.retryFailedLeaves.bind(this)\n    this.destroy = this.destroy.bind(this)\n    this.showInputOutput = this.showInputOutput.bind(this)\n  }\n\n  render() {\n    const { item, expanded, jobMetas } = this.props\n    const { input, jobLogs } = this.state\n    const output = item.output !== \"\" ? JSON.parse(item.output) : {}\n    const jobMeta = (jobMetas || []).find(candidate => candidate.SID === item.type)\n\n    const treeStatus = Jobs.treeStatus(item)\n\n    return (\n      <div \n        className=\"p-0 m-0\"\n        style={{\n          display: \"grid\",\n          gridTemplateAreas: \"'header actions' 'details details'\",\n          gridTemplateColumns: \"1fr 170px\",\n          gridGap: \"2px\",\n          background: treeStatus === \"failed\" ? \"#fcede8\" : treeStatus === \"processing\" ? \"#e8f4fc\" : \"#f8f9fa\",\n        }}\n        key={JSON.stringify(jobMeta)}\n      >\n        <div \n          style={{\n            gridArea: \"header\",\n            cursor: 'pointer'\n          }}\n          onClick={this.loadItem}\n          className=\"d-flex align-items-center\"\n        >\n          {this.renderStatus()}\n          <span className=\"ml-1 mr-1\">\n            {jobMeta?.Title || item.sid}\n          </span>\n          <small className=\"text-muted ml-2 mr-2\">\n            {item.id}\n          </small>\n          <span className=\"flex-fill\">\n            { expanded ? <ArrowDown/> : <ArrowRight/> }\n          </span>\n          <small className=\"text-muted\">\n            {Moment(item.createdAt).fromNow()}\n          </small>\n        </div>\n\n        <div style={{ gridArea: \"actions\" }}\n          className=\"btn-group btn-group-sm\"\n        >\n          <Button variant=\"light\" \n            className={this.state.showInputOutput ? undefined : \"text-muted\"}\n            onClick={() => this.showInputOutput(!this.state.showInputOutput)}\n          ><ArrowLeftRight/></Button>\n          { (item.logsCount > 0) && (\n            <Button variant=\"light\" \n              className={this.state.showLogs ? undefined : \"text-muted\"}\n              onClick={() => this.showLogs(!this.state.showLogs)}\n            ><ReceiptCutoff/></Button>) }\n          <Button variant=\"light\"\n            onClick={this.retry}\n          ><ArrowClockwise/></Button>\n          <Button variant=\"light\" onClick={this.destroy}\n          ><Trash/></Button>\n        </div>\n\n        <div\n          style={{ \n            gridArea: \"details\",\n          }}\n          className=\"d-flex flex-column\"\n        >\n          <div\n            style={{\n              display: this.state.showInputOutput ? 'flex' : 'none'\n            }}\n          >\n            <div className=\"d-flex align-items-center\">\n              <BoxArrowInRight className=\"m-2\" style={{zoom: 1.5}}/>\n              <ReactJsonView src={input} collapsed={false} style={{fontSize: 10}} displayDataTypes={false}/>\n            </div>\n            <div className=\"d-flex align-items-center\">\n              <BoxArrowRight className=\"m-2\" style={{zoom: 1.5}}/>\n              <ReactJsonView src={output} collapsed={false} style={{fontSize: 10}} displayDataTypes={false}/>\n            </div>\n          </div>\n          \n          <div\n            style={{\n              display: this.state.showLogs ? 'block' : 'none'\n            }}\n          >\n            { jobLogs.map(jobLog => {\n              return (\n                <div className=\"alert alert-primary p-0 d-flex\" key={jobLog.id}>\n                  <small className=\"text-muted mr-2\">{jobLog.createdAt}</small>\n                  <code className=\"flex-fill\">{jobLog.content}</code>\n                </div>)\n            }) }\n          </div>\n        </div>\n      </div>)\n  }\n\n  private renderStatus() {\n    const { item } = this.props\n    const treeStatus = Jobs.treeStatus(item)\n\n    if (item.status === treeStatus) {\n      return <StatusComponent status={item.status}/>\n    }\n\n    return [\n      <StatusComponent status={treeStatus}/>,\n      <StatusComponent status={item.status}/>\n    ]\n  }\n\n  private async loadItem() {\n    const { item, expanded } = this.props\n    if (!expanded) {\n      await this.props.loadSubtree!(item)\n      this.props.onExpand(true)\n    } else {\n      this.props.onExpand(false)\n    }\n  }\n\n  private async showLogs(showLogs: boolean) {\n    const { item } = this.props\n    if (showLogs) {\n      let jobLogs = await JobLogs.loadLogs(item)\n      this.setState({ showLogs, jobLogs })\n    } else {\n      this.setState({ showLogs })\n    }\n  }\n\n  private retry() {\n    const { item } = this.props;\n    if (window.confirm('Do you wanna to retry this job?') === false) {\n      return\n    }\n\n    (async () => {\n      await Jobs.retry(item)\n    })()\n  }\n\n  private retryFailedLeaves() {\n    const { item } = this.props;\n    if (window.confirm('Do you wanna to retry failed children of this job?') === false) {\n      return\n    }\n\n    (async () => {\n      await Jobs.retryFailedLeaves(item)\n    })()\n  }\n\n  private destroy() {\n    if (window.confirm('Do you wanna to destroy this job?') === false) {\n      return\n    }\n    this.props.destroy!()\n  }\n\n  private async showInputOutput(showInputOutput: boolean) {\n    if (showInputOutput === true) {\n      const input = await this.props.getInput!()\n      this.setState({ input })\n    }\n    this.setState({ showInputOutput })\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({\n  jobMetas: state.jobMetas,\n})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => {\n  const { item } = ownProps\n  return {\n    loadSubtree: (job: Job) => dispatch(Actions.loadSubtree(job)),\n    destroy: () => dispatch(Actions.destroy(item)),\n    getInput: () => dispatch(Actions.getInput(item)),\n  }\n}\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(JobComponent)","import React from 'react'\nimport classnames from 'classnames'\n\nimport TreeLeaf from '../../models/tree_leaf'\nimport Builder from './builder'\nimport Leaves from './leaves'\n\ntype Props<Item> = {\n  item: Item\n  builder: Builder<Item>\n}\n\ntype State = {\n  expanded: boolean\n}\n\nclass TreeLeafComponent<Item extends TreeLeaf> extends React.Component<Props<Item>, State> {\n  constructor(props: Props<Item>) {\n    super(props)\n\n    this.state = {\n      expanded: false\n    }\n\n    this.onExpand = this.onExpand.bind(this)\n  }\n\n  render() {\n    const { item, builder } = this.props\n    const { expanded } = this.state\n\n    return (\n      <li className=\"list-group-item p-0 border-0 m-0 mb-1\" key={item.digest()}>\n        {React.createElement(builder, {\n          item,\n          onExpand: this.onExpand,\n          expanded\n        })}\n        <div className={classnames({'d-none': !expanded, 'mt-1 ml-4': true})}>\n          <Leaves\n            items={item.childs as Item[]}\n            builder={builder}\n          />\n        </div>\n      </li>)\n  }\n\n  private onExpand(expanded: boolean) {\n    this.setState({ expanded })\n  }\n}\n\nexport default TreeLeafComponent","import React from 'react'\nimport classnames from 'classnames'\n\nimport TreeLeafInterface from '../../models/tree_leaf'\nimport Builder from './builder'\nimport Leaf from './leaf'\n\ntype Props<Item> = {\n  items: Item[]\n  builder: Builder<Item>\n}\n\nclass TreeLeaves<Item extends TreeLeafInterface> extends React.Component<Props<Item>> {\n  render() {\n    const { items, builder } = this.props\n\n    return (\n      <ul className={classnames('list-group', 'list-group-flush', 'p-0')}>\n        { items.map(item => {\n          return (\n            <Leaf\n              key={item.id}\n              item={item}\n              builder={builder}\n            />)\n        }) }\n      </ul>)\n  }\n}\n\nexport default TreeLeaves","import React from 'react'\n\ntype Props = {\n  page: number\n  maxPage: number\n  onPageChange: (page: number) => any\n}\n\nclass Paginator extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props)\n    this.onPageLinkClick = this.onPageLinkClick.bind(this)\n  }\n\n  render() {\n    const { maxPage } = this.props\n\n    return (\n      <nav>\n        <ul className=\"pagination pagination-sm justify-content-center m-1\">\n          { Array.apply(null, Array(maxPage)).map((v, i) => {\n            return this.renderPageLink(i + 1)\n          }) }\n        </ul>\n      </nav>)\n  }\n\n  private renderPageLink(pageNumber: number) {\n    const { page } = this.props\n    const current = page === pageNumber\n\n    return (\n      <li \n        className=\"page-item\" key={pageNumber}\n        style={{cursor: 'pointer'}}\n      >\n        { current && (\n            <span \n              className=\"page-link text-muted\"\n              style={{border: 'none'}}\n            >{pageNumber}</span>) }\n      \n        { !current && (\n            <a \n              className=\"page-link\"\n              style={{border: 'none'}}\n              href=\"#\"\n              onClick={(event) => this.onPageLinkClick(event, pageNumber)}\n            >{pageNumber}</a>) }\n      </li>)\n  }\n\n  private onPageLinkClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>, page: number) {\n    event.preventDefault()\n    this.props.onPageChange(page)\n  }\n}\n\nexport default Paginator","import React from 'react'\nimport { Link as RouterLink } from 'react-router-dom'\n\nimport Filters from '../../models/filters'\nimport { Funnel, PlusCircle } from 'react-bootstrap-icons'\n\ntype Props = {\n  value: Filters\n  onChange: (value: Filters) => any\n}\n\nclass FiltersComponent extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props)\n    this.onChange = this.onChange.bind(this)\n  }\n\n  render() {\n    const { value } = this.props\n    return (\n      <form onChange={this.onChange} className=\"jumbotron p-2 m-1\">\n        <div className=\"form-row\">\n          <div className=\"col-1\">\n            <Funnel/>\n          </div>\n          <div className=\"col-6\">\n            <div className=\"form-check form-check-inline\">\n              <input \n                className=\"form-check-input\"\n                type=\"radio\"\n                name=\"IsPeriodical\"\n                id=\"IsPeriodicalTrue\"\n                value=\"1\"\n                defaultChecked={value.IsPeriodical === true}\n              />\n              <label className=\"form-check-label\" htmlFor=\"IsPeriodicalTrue\">\n                Periodical\n              </label>\n            </div>\n            <div className=\"form-check form-check-inline\">\n              <input\n                className=\"form-check-input\"\n                type=\"radio\"\n                name=\"IsPeriodical\"\n                id=\"IsPeriodicalFalse\"\n                value=\"0\"\n                defaultChecked={value.IsPeriodical === false}\n              />\n              <label className=\"form-check-label\" htmlFor=\"IsPeriodicalFalse\">\n                Non periodical\n              </label>\n            </div>\n          </div>\n          <div className=\"col-4\">\n            <input\n              type=\"text\"\n              className=\"form-control form-control-sm\"\n              name=\"Type\"\n              placeholder=\"Job\"\n              value={value.Type}\n            />\n          </div>\n          <div className=\"col-1\">\n            <RouterLink to={\"/new\"} className=\"btn btn-light\">\n              <PlusCircle/>\n            </RouterLink>\n          </div>\n        </div>\n      </form>\n    )\n  }\n\n  private onChange(event: React.FormEvent<HTMLFormElement>) {\n    const formData = new FormData(event.currentTarget)\n    const value: Filters = {}\n    if (formData.get(\"IsPeriodical\") === \"1\") { value.IsPeriodical = true }\n    if (formData.get(\"IsPeriodical\") === \"0\") { value.IsPeriodical = false }\n    if (formData.get(\"Type\") !== \"\") { value.Type = formData.get(\"Type\") as string }\n    this.props.onChange(value)\n  }\n}\n\nexport default FiltersComponent","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport ReduxState from './../../redux/state'\nimport Actions from '../../redux/actions/jobs'\n\nimport Job from '../../models/job'\nimport JobMeta from '../../models/job_meta'\nimport Filters from '../../models/filters'\nimport Item from './item'\nimport TreeLeaves from '../tree/leaves'\nimport Paginator from '../misc/paginator'\nimport FiltersComponent from './filters'\n\ntype Props = {\n  jobMetas?: JobMeta[]\n  roots?: Job[]\n  index?: (filters: Filters, params: { page: number }) => any\n}\ntype State = {\n  filters: Filters\n  loading: boolean\n  page: number\n  maxPage: number\n}\n\nclass RootsList extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n\n    this.state = {\n      loading: true,\n      page: 1,\n      maxPage: 1,\n      filters: {\n        IsPeriodical: false\n      }\n    }\n    \n    this.onPageChange = this.onPageChange.bind(this)\n    this.onFiltersChange = this.onFiltersChange.bind(this)\n  }\n\n  componentDidMount() {\n    this.loadItems(1).then(() => {})\n  }\n\n  render() {\n    const { roots } = this.props\n    const { loading, page, maxPage } = this.state\n\n    if (loading) {\n      return (\n        <div className=\"d-flex w-100 h-100\">\n          <div className=\"m-auto\">Loading</div>\n        </div>\n      )\n    }\n\n    return (\n      <>\n        <FiltersComponent\n          value={this.state.filters}\n          onChange={this.onFiltersChange}\n        />\n        <TreeLeaves\n          items={roots! || []}\n          builder={Item}\n        />\n        <Paginator page={page} maxPage={maxPage} onPageChange={this.onPageChange}/>\n      </>)\n  }\n\n  private onPageChange(newPage: number) {\n    this.loadItems(newPage).then(() => {})\n  }\n\n  private async loadItems(page: number) {\n    const { filters, maxPage } = this.state\n    await this.props.index!(filters, { page })\n    this.setState({\n      loading: false,\n      page,\n      maxPage: Math.max(maxPage, page + 1),\n    })\n  }\n\n  private onFiltersChange(filters: Filters) {\n    this.setState({\n      filters\n    }, () => {\n      this.loadItems(1).then(() => {})\n    })\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({\n  roots: state.jobs,\n  jobMetas: state.jobMetas,\n})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({\n  index: (filters: Filters, params: { page: number }) => dispatch(Actions.index(filters, params)),\n})\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(RootsList)","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport ReduxState from './../redux/state'\n\nimport JobRootsList from './../components/jobs/roots'\n\ntype Props = {\n}\nclass App extends React.Component<Props> {\n\n  render() {\n    return (\n      <JobRootsList/>\n    );\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({})\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(App)\n","import React from 'react'\n\ntype Props<T> = {\n  label: string\n  defaultValue: T\n  onChange: (newValue: T) => any\n  jsonSchema: any\n}\n\n// No typings\n// Lib loaded in old-school way globaly and binded to `window`\n\nclass MyJSONEditor<T> extends React.Component<Props<T>> {\n  private elRef = React.createRef<HTMLDivElement>()\n  private jsonEditor: any\n\n  constructor(props: Props<T>) {\n    super(props)\n    this.onChange = this.onChange.bind(this)\n  }\n\n  componentDidMount() {\n    this.jsonEditor = new (window as any).JSONEditor(this.elRef.current, {\n      theme: 'bootstrap4',\n      schema: this.props.jsonSchema,\n      disable_array_reorder: true,\n      // disable_edit_json: true,\n      array_controls_top: true,\n      form_name_root: this.props.label,\n      no_additional_properties: true,\n      show_errors: 'always',\n      object_layout: 'table',\n      remove_empty_properties: false,\n    });\n\n    this.jsonEditor.setValue(this.props.defaultValue)\n    this.jsonEditor.on('change', this.onChange);\n  }\n\n  render() {\n    return (\n      <div ref={this.elRef}/>)\n  }\n\n  onChange() {\n    const value = this.jsonEditor.getValue()\n    this.props.onChange(value)\n  }\n}\n\nexport default MyJSONEditor","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport ReduxState from './../redux/state'\n\nimport JobMeta from '../models/job_meta'\nimport { Form, Button } from 'react-bootstrap'\nimport JsonEditor from './../components/misc/json_editor'\n\nimport Actions from '../redux/actions/jobs'\n\ntype Props = {\n  jobMetas?: JobMeta[]\n  runJob?: (sid: string, input: any) => Promise<any>\n}\n\ntype State = {\n  jobSID?: string\n  input?: any\n}\n\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {}\n    this.onJobSIDChange = this.onJobSIDChange.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  render() {\n    return (\n      <>\n        <h3>Run new job</h3>\n        <Form onSubmit={this.onSubmit}>\n          <Form.Group>\n            <Form.Label>SID</Form.Label>\n            <Form.Control as=\"select\" custom\n              onChange={this.onJobSIDChange}\n            >\n              <option className=\"text-muted\" value=\"\">Choose job to create</option>\n              {(this.props.jobMetas || []).map(jobMeta => {\n                return (<option value={jobMeta.SID}>{jobMeta.Title}</option>)\n              })}\n            </Form.Control>\n          </Form.Group>\n          <Form.Group>\n            {this.renderInputEditor()}\n\n            <blockquote className=\"blockquote\">\n              <p className=\"mb-0\">{JSON.stringify(this.state.input)}</p>\n              <footer className=\"blockquote-footer\">would be sent as job input</footer>\n            </blockquote>\n            \n          </Form.Group>\n          <Button variant=\"light\" type=\"submit\" className=\"w-100\">\n            Submit\n          </Button>\n        </Form>\n      </>\n    );\n  }\n\n  renderInputEditor() {\n    const { jobSID } = this.state\n    const jobMeta = (this.props.jobMetas || []).find(c => c.SID === jobSID)\n    if (!jobMeta) { return }\n\n    if (!jobMeta.InputJSONSchema) {\n      return (\n        <div className=\"alert alert-primary\">\n          No input JSON schema defined for this Job\n        </div>\n      )\n    }\n\n    const jsonSchema = JSON.parse(jobMeta.InputJSONSchema!)\n    return (\n      <JsonEditor\n        label=\"Input\"\n        jsonSchema={jsonSchema}\n        defaultValue={this.state.input}\n        onChange={newValue => {\n          this.setState({\n            input: newValue\n          })\n        }}\n      />\n    )\n  }\n\n  private async onSubmit(event: React.SyntheticEvent<HTMLFormElement>) {\n    event.preventDefault()\n\n    const response = await this.props.runJob!(this.state.jobSID!, this.state.input)\n    alert(JSON.stringify(response))\n    window.location.reload()\n    \n    return false\n  }\n\n  private onJobSIDChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    const jobSID = event.target.value\n    if (jobSID === \"\") {\n      this.setState({ jobSID: undefined })\n    } else {\n      this.setState({ jobSID })\n    }\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({\n  jobMetas: state.jobMetas,\n})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({\n  runJob: (sid: string, input: any) => dispatch(Actions.run(sid, input)),\n})\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(App)\n","import React from 'react'\nimport { Switch, Route } from 'react-router'\n\nimport Index from './pages/index'\nimport New from './pages/new'\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/index\" exact component={Index}/>\n      <Route path=\"/new\" exact component={New}/>\n      <Route component={Index}/>\n    </Switch>\n  )\n}\n\nexport default Router","import * as Actions from '../actions/jobs'\nimport Job from '../../models/job'\n\nexport type State = Job[]\n\nconst defaultState: State = []\n\ntype Action = Actions.Index | Actions.Update | Actions.Destroy\nexport default function reducer(state: State = defaultState, action: Action) {\n  switch (action.type) {\n    case Actions.INDEX: {\n      const a = action as Actions.Index\n      return a.jobs\n    }\n    case Actions.UPDATE: {\n      const a = action as Actions.Update\n      const newJob = a.job\n      \n      const existingJob = state.find((j: Job) => j.id === a.job.id)\n\n      // New root job\n      if (!existingJob && newJob.isRoot()) {\n        state.unshift(newJob)\n        return state.slice(0)\n      }\n\n      // In the list already\n      if (existingJob) {\n        const index = state.indexOf(existingJob)\n        state[index] = newJob\n        return state.slice(0)\n      }\n      \n      return state\n    }\n    case Actions.DESTROY: {\n      const a = action as Actions.Destroy\n      return state.filter(j => j.id !== a.job.id)\n    }\n  }\n\n  return state\n}","import * as Actions from '../actions/job_metas'\nimport JobMeta from '../../models/job_meta'\n\nexport type State = JobMeta[]\n\nconst defaultState: State = []\n\ntype Action = Actions.Index\nexport default function reducer(state: State = defaultState, action: Action) {\n  switch (action.type) {\n    case Actions.INDEX: {\n      const a = action as Actions.Index\n      return a.items\n    }\n  }\n  return state\n}","import { combineReducers } from 'redux'\nimport { connectRouter } from 'connected-react-router'\n\nimport jobs from './jobs'\nimport jobMetas from './job_metas'\n\nconst rootReducer = (history: any) => combineReducers({\n  router: connectRouter(history),\n  jobs,\n  jobMetas,\n})\n\nexport default rootReducer","import * as Redux from 'redux'\n\n// Middleware for allowing actions to be class instances\nconst actionToPlainObjectMiddleware: Redux.Middleware<any, any> = store => next => action => {\n  function isObjectLike(val: any): val is {} {\n    return val !== undefined && val !== null && typeof val === 'object'\n   }\n  if (isObjectLike(action)) {\n    return next({ ...action } as any)\n  }\n  return next(action)\n}\n\nexport default actionToPlainObjectMiddleware","import * as Redux from 'redux'\nimport ReduxThunk from 'redux-thunk'\n\nimport * as History from 'history'\nimport { routerMiddleware } from 'connected-react-router'\n\nimport createRootReducer from './reducers'\n\nimport actionToPlainObjectMiddleware from './middlewares/plain_object_middleware'\n\ndeclare var window: {\n  __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: any,\n  __USE_MEMORY_HISTORY__?: boolean\n}\n\nlet composeEnhancers = Redux.compose\n\n// Create an enhanced history that syncs navigation events with the store\nconst history: History.History = !!window.__USE_MEMORY_HISTORY__ ?\n  History.createMemoryHistory() : History.createHashHistory()\n\n// FIXME: https://github.com/zalmoxisus/redux-devtools-extension/issues/588\nif (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n  composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n}\n\n// Build the middleware for intercepting and dispatching navigation actions\nconst middlewares = Redux.applyMiddleware(\n  routerMiddleware(history),\n  ReduxThunk,\n  actionToPlainObjectMiddleware\n)\nconst enhancers = composeEnhancers(middlewares)\n\nfunction createStore(preloadedState: any = {}) {\n  const rootReducer = createRootReducer(history)\n  const store = Redux.createStore(rootReducer, preloadedState, enhancers)\n  return store\n}\n\nconst store = createStore()\nexport { history, store, createStore }","import React from 'react'\nimport * as ReactRedux from 'react-redux'\nimport ReduxState from './redux/state'\n\nimport JobMeta from './models/job_meta'\nimport JobMetaActions from './redux/actions/job_metas'\n\nimport { Row, Col } from 'react-bootstrap'\n\nimport Layout from './components/layout'\nimport Router from './router'\n\nimport { ConnectedRouter } from 'connected-react-router'\nimport { history } from './redux/store'\n\ntype Props = {\n  indexJobMetas?: () => any\n}\nclass App extends React.Component<Props> {\n  componentDidMount() {\n    this.props.indexJobMetas!()\n  }\n\n  render() {\n    return (\n      <ConnectedRouter history={history}>\n        <Layout>\n          <Row>\n            <Col md={12} className=\"pt-2\">\n              <Router/>\n            </Col>\n          </Row>\n        </Layout>\n      </ConnectedRouter>\n    );\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: Props) => ({})\nconst mapDispatchToProps = (dispatch: any, ownProps: Props) => ({\n  indexJobMetas: () => dispatch(JobMetaActions.index()),\n})\n\nexport default ReactRedux.connect(mapStateToProps, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}